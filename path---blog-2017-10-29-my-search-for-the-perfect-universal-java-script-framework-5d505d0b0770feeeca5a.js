webpackJsonp([45774501302272],{585:function(e,t){e.exports={data:{markdownRemark:{html:'<p>It was 2010 when <a href="http://backbonejs.org">Backbone.js</a> came out. Finally I could write structured code to create full web applications for our users. And with Backbone.js and Node.js, a new dream started to emerge, a website that starts rendering on the server side and continues to render on the users’ browsers.</p>\n<p>I spent days and nights trying to build a generic isomorphic web framework that starts with server side rendering (SSR) and then continues work in the browser. It was difficult to design and I could only make it meet the use case of my company—with lots of small hacks to get the job done. Airbnb made a shot at building such a framework as well with <a href="https://github.com/rendrjs/rendr">rendr</a>. It was the closest thing to a Backbone.js isomorphic web framework, but it didn’t support the full features of Backbone.</p>\n<p><a href="https://reactjs.org">React</a> was the game changer. It was better suited to building universal apps since its core idea is mapping state to DOM, or in the server rendering case, state to an HTML string. But still, making React render on the server side and then rehydrating it on the client side includes solving many edge cases, messy configuration, and cryptic knowledge of Babel and webpack.</p>\n<p>So universal web apps are great but hard. And even when you do get universal React working, SSR can be super slow and CPU intensive so it’ll often hog the Node.js event loop. Even after lots of optimizing, our team’s ultimate solution is always caching.</p>\n<p>But why dynamically rendered content just to cache it when you can just pre-cache everything? AKA static websites?</p>\n<p>This is what Gatsby enables. It makes it trivial to build React websites as pre-cached/built static websites.</p>\n<p>I love static websites. That’s how we all started building websites, right? For me it was an online editor of <a href="https://en.wikipedia.org/wiki/Yahoo!_GeoCities">GeoCities</a> and that was all we needed back then. Why not go back to static websites? They are fast, scalable, secure and eliminate time consuming devops work.</p>\n<p>Static websites aren’t a great fit for everything. Full webapps behind login can be fully rendered on the client side so see small benefit from static rendering since each visit is personalized. Serving a statically rendered “shell” for the website could help with perceived performance, but… let’s get back to talking about static websites and leave discussing web apps for another time.</p>\n<p>Sprinkling JavaScript on a static website can be tricky, but Gatsby does this so well with React that you don’t have to think about it at all—it just works. I used to tweak my configuration all the time to achieve better performance, but Gatsby allows me to outsource the configuration and optimization and get a super fast website with zero work.</p>\n<p>I’ll also mention <a href="https://github.com/zeit/next.js">next.js</a> which is quite similar and supports both SSR for dynamic content and exporting to static pages. And don’t forget <a href="https://www.netlify.com">Netlify</a> who is doing an amazing job at building and hosting static websites.</p>\n<p>It is so much easier and fun to code for the web today. I would haved saved a lot of development/devops hours at my previous startup just by using Gatsby. And the most fun fact about Gatsby is these aren’t modern ideas at all - it’s just static websites done right.</p>\n<p>This post is based on a <a href="https://twitter.com/ketacode/status/924243146795515904">tweetstorm</a> - find me on Twitter <a href="https://twitter.com/ketacode">@ketacode</a></p>',excerpt:"It was 2010 when  Backbone.js  came out. Finally I could write structured code to create full web applications for our users. And with…",timeToRead:2,fields:{slug:"/blog/2017-10-29-my-search-for-the-perfect-universal-javaScript-framework/"},frontmatter:{excerpt:null,image:null,date:"October 29th 2017",rawDate:"2017-10-29T00:00:00.000Z",canonicalLink:null,publishedAt:null,title:"My search for the perfect universal JavaScript framework",imageAuthor:null,imageAuthorLink:null,imageTitle:null,showImageInArticle:null,author:{id:"Tal Bereznitskey",bio:"CTO @ Torii, a stealth mode startup",twitter:"@ketacode",avatar:{childImageSharp:{resolutions:{tracedSVG:"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' viewBox='0 0 30 30'%3E%3Crect width='100%25' height='100%25' fill='%23f6f2f8'/%3E%3Cpath d='M12 4c-1.2 2.2-1.3 6-.3 6 .5 0 .8 1.4 1 3 0 2.7-.4 3.1-4 4.2-4.2 1.3-8.6 8-7.3 11.4.5 1.4 27.6 2.2 27.6.8 0-4.7-2.6-9.7-6-11.4-3.1-1.6-3.7-2.4-3.6-5 0-1.6.4-3 .9-3 1.3 0 .7-4.8-.9-6.4-2.1-2.2-6.1-2-7.4.3m4 1.4c-.1 0-.3 1.4-.4 3-.2 3 .8 3.6 1.8 1l1.2-3c.3-.8-.1-1.3-1-1.3s-1.6.1-1.7.3' fill='%23e0d6eb' fill-rule='evenodd'/%3E%3C/svg%3E",width:63,height:63,src:"/static/tal-bereznitskey-4d22a83f7dcb55ce25528ca147ee288b-4a2e8.jpg",srcSet:"/static/tal-bereznitskey-4d22a83f7dcb55ce25528ca147ee288b-4a2e8.jpg 1x,\n/static/tal-bereznitskey-4d22a83f7dcb55ce25528ca147ee288b-53944.jpg 1.5x,\n/static/tal-bereznitskey-4d22a83f7dcb55ce25528ca147ee288b-bd4ff.jpg 2x,\n/static/tal-bereznitskey-4d22a83f7dcb55ce25528ca147ee288b-6257f.jpg 3x"}}},fields:{slug:"/contributors/tal-bereznitskey/"}}}}},pathContext:{slug:"/blog/2017-10-29-my-search-for-the-perfect-universal-javaScript-framework/",prev:{fields:{slug:"/blog/2017-10-20-from-wordpress-to-developing-in-react-starting-to-see-it/",package:null},frontmatter:{title:"From WordPress to Developing in React — Starting to See It",draft:null,canonicalLink:null,publishedAt:null}},next:{fields:{slug:"/blog/2017-11-06-migrate-hugo-gatsby/",package:null},frontmatter:{title:"Migrate from Hugo to Gatsby",draft:null,canonicalLink:null,publishedAt:null}}}}}});
//# sourceMappingURL=path---blog-2017-10-29-my-search-for-the-perfect-universal-java-script-framework-5d505d0b0770feeeca5a.js.map