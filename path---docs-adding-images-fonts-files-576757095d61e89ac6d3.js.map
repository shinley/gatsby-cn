{"version":3,"sources":["webpack:///path---docs-adding-images-fonts-files-576757095d61e89ac6d3.js","webpack:///./.cache/json/docs-adding-images-fonts-files.json"],"names":["webpackJsonp","608","module","exports","data","markdownRemark","html","excerpt","timeToRead","frontmatter","title","parent","__typename","relativePath","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,6yNAA6xLC,QAAA,2IAAAC,WAAA,EAAAC,aAA05CC,MAAA,cAAqBC,QAAWC,WAAA,OAAAC,aAAA,uCAAyEC,aAAgBC,KAAA","file":"path---docs-adding-images-fonts-files-576757095d61e89ac6d3.js","sourcesContent":["webpackJsonp([240794774872898],{\n\n/***/ 608:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>使用Webpack，您可以直接在JavaScript模块中Import(导入) 文件。 这告诉Webpack将该文件包含在该包中。 与CSS导入不同，导入文件会为您提供一个字符串值。 此值是您可以在代码中引用的最终路径，例如 作为图像的src属性或链接到PDF的href。</p>\\n<p>为了减少对服务器的请求数量，导入小于10,000字节的图像将返回<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\\\">数据URI</a>而不是路径。 这适用于以下文件扩展名：svg，jpg，jpeg，png，gif，mp4，webm，wav，mp3，m4a，aac和oga。</p>\\n<p>下面是一个示例：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">&apos;react&apos;</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> logo <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">&apos;./logo.png&apos;</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Tell Webpack this JS file uses this image</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>logo<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// /logo.84287d09.png</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Header</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Import result is the URL of your image</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>img src<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>logo<span class=\\\"token punctuation\\\">}</span> alt<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;Logo&quot;</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">&gt;</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> Header<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>这确保了当项目建成时，Webpack将正确地将图像移动到公共文件夹中，并为我们提供正确的路径。</p>\\n<p>这也适用于CSS：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.Logo</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-image</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token url\\\">url(./logo.png)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Webpack在CSS中查找所有相关的模块引用（以./开头），并用编译后的包中的最终路径替换它们。 如果您输入错误或者意外删除了一个重要的文件，就会看到一个编译错误，就像导入一个不存在的JavaScript模块一样。 编译包中的最终文件名是由Webpack从内容哈希生成的。 如果将来文件内容发生变化，Webpack会在生产中给它一个不同的名称，所以你不必担心内容被长期缓存。</p>\\n<p>请注意，这也是Webpack的自定义功能。</p>\\n<p>下一节将介绍处理静态资产的另一种方法。</p>\\n<h2 id=\\\"使用静态文件夹\\\"><a href=\\\"#%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E5%A4%B9\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>使用静态文件夹</h2>\\n<h3 id=\\\"在模块系统之外添加资源\\\"><a href=\\\"#%E5%9C%A8%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%A4%96%E6%B7%BB%E5%8A%A0%E8%B5%84%E6%BA%90\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>在模块系统之外添加资源</h3>\\n<p>您也可以将其他资源添加到项目根目录的静态文件夹中。</p>\\n<p>请注意，我们通常鼓励您使用JavaScript文件导入资源。 这种机制提供了许多好处：</p>\\n<ul>\\n<li>脚本和样式表被缩小并捆绑在一起以避免额外的网络请求。</li>\\n<li>缺少文件会导致编译错误，而不是404用户的错误。</li>\\n<li>结果文件名会被散列成新值，因此您不必担心浏览器缓存旧版本。</li>\\n</ul>\\n<p>但是，您可以使用escape hatch在模块系统之外添加资产。</p>\\n<p>如果你把一个文件放到静态文件夹中，它不会被Webpack处理。 相反，它将被复制到公用文件夹中。 例如。 如果将一个名为sun.jpg的文件添加到静态文件夹中，它将被复制到public / sun.jpg。 要引用静态文件夹中的资源，您需要使用一个名为<strong>PATH_PREFIX</strong>的特殊变量。 你将需要确保你在你的gatsby-config.js中设置了pathPrefix来使其工作（如果你没有路径前缀，就把它设置为/）。</p>\\n<p>在JavaScript代码中，您可以使用<strong>PATH_PREFIX</strong>用于类似的目的：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Note: this is an escape hatch and should be used sparingly!</span>\\n  <span class=\\\"token comment\\\">// Normally we recommend using `import` for getting asset URLs</span>\\n  <span class=\\\"token comment\\\">// as described in &#x201C;Adding Images and Fonts&#x201D; above this section.</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>img src<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>__PATH_PREFIX__ <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">&apos;/img/logo.png&apos;</span><span class=\\\"token punctuation\\\">}</span> alt<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;Logo&quot;</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">&gt;</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>请记住这种方法的缺点：</p>\\n<ul>\\n<li>静态文件夹中的文件都不会被后处理或缩小。</li>\\n<li>缺少的文件将不会在编译时被调用，并会导致您的用户产生404错误。</li>\\n<li>结果文件名将不会被散列，因此您需要添加查询参数或每次更改时重命名它们。</li>\\n</ul>\\n<h3 id=\\\"什么时候使用静态文件夹\\\"><a href=\\\"#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E5%A4%B9\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>什么时候使用静态文件夹</h3>\\n<p>通常我们建议从JavaScript导入样式表，图片和字体。 静态文件夹可用于解决一些不常见的情况：</p>\\n<ul>\\n<li>您需要在构建输出中使用具有特定名称的文件，例如<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/Manifest\\\">manifest.webmanifest</a>。</li>\\n<li>你有成千上万的图像，需要动态引用他们的路径。</li>\\n<li>你想在包装代码之外加入一个像<a href=\\\"http://github.hubspot.com/pace/docs/welcome/\\\">pace.js</a>这样的小脚本。</li>\\n<li>\\n<p>有些库可能与Webpack不兼容，除此之外，您没有别的选择，只能将其作为标签包含在内。</p>\\n\\n</li>\\n</ul>\",\"excerpt\":\"使用Webpack，您可以直接在JavaScript模块中Import(导入) 文件。 这告诉Webpack将该文件包含在该包中。 与CSS导入不同，导入文件会为您提供一个字符串值。 此值是您可以在代码中引用的最终路径，例如 作为图像的src属性或链接到PDF的href…\",\"timeToRead\":2,\"frontmatter\":{\"title\":\"添加图像，字体和文件\"},\"parent\":{\"__typename\":\"File\",\"relativePath\":\"docs/adding-images-fonts-files.md\"}}},\"pathContext\":{\"slug\":\"/docs/adding-images-fonts-files/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-adding-images-fonts-files-576757095d61e89ac6d3.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>使用Webpack，您可以直接在JavaScript模块中Import(导入) 文件。 这告诉Webpack将该文件包含在该包中。 与CSS导入不同，导入文件会为您提供一个字符串值。 此值是您可以在代码中引用的最终路径，例如 作为图像的src属性或链接到PDF的href。</p>\\n<p>为了减少对服务器的请求数量，导入小于10,000字节的图像将返回<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\\\">数据URI</a>而不是路径。 这适用于以下文件扩展名：svg，jpg，jpeg，png，gif，mp4，webm，wav，mp3，m4a，aac和oga。</p>\\n<p>下面是一个示例：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">&apos;react&apos;</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> logo <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">&apos;./logo.png&apos;</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Tell Webpack this JS file uses this image</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>logo<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// /logo.84287d09.png</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Header</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Import result is the URL of your image</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>img src<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>logo<span class=\\\"token punctuation\\\">}</span> alt<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;Logo&quot;</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">&gt;</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> Header<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>这确保了当项目建成时，Webpack将正确地将图像移动到公共文件夹中，并为我们提供正确的路径。</p>\\n<p>这也适用于CSS：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.Logo</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-image</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token url\\\">url(./logo.png)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Webpack在CSS中查找所有相关的模块引用（以./开头），并用编译后的包中的最终路径替换它们。 如果您输入错误或者意外删除了一个重要的文件，就会看到一个编译错误，就像导入一个不存在的JavaScript模块一样。 编译包中的最终文件名是由Webpack从内容哈希生成的。 如果将来文件内容发生变化，Webpack会在生产中给它一个不同的名称，所以你不必担心内容被长期缓存。</p>\\n<p>请注意，这也是Webpack的自定义功能。</p>\\n<p>下一节将介绍处理静态资产的另一种方法。</p>\\n<h2 id=\\\"使用静态文件夹\\\"><a href=\\\"#%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E5%A4%B9\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>使用静态文件夹</h2>\\n<h3 id=\\\"在模块系统之外添加资源\\\"><a href=\\\"#%E5%9C%A8%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%A4%96%E6%B7%BB%E5%8A%A0%E8%B5%84%E6%BA%90\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>在模块系统之外添加资源</h3>\\n<p>您也可以将其他资源添加到项目根目录的静态文件夹中。</p>\\n<p>请注意，我们通常鼓励您使用JavaScript文件导入资源。 这种机制提供了许多好处：</p>\\n<ul>\\n<li>脚本和样式表被缩小并捆绑在一起以避免额外的网络请求。</li>\\n<li>缺少文件会导致编译错误，而不是404用户的错误。</li>\\n<li>结果文件名会被散列成新值，因此您不必担心浏览器缓存旧版本。</li>\\n</ul>\\n<p>但是，您可以使用escape hatch在模块系统之外添加资产。</p>\\n<p>如果你把一个文件放到静态文件夹中，它不会被Webpack处理。 相反，它将被复制到公用文件夹中。 例如。 如果将一个名为sun.jpg的文件添加到静态文件夹中，它将被复制到public / sun.jpg。 要引用静态文件夹中的资源，您需要使用一个名为<strong>PATH_PREFIX</strong>的特殊变量。 你将需要确保你在你的gatsby-config.js中设置了pathPrefix来使其工作（如果你没有路径前缀，就把它设置为/）。</p>\\n<p>在JavaScript代码中，您可以使用<strong>PATH_PREFIX</strong>用于类似的目的：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Note: this is an escape hatch and should be used sparingly!</span>\\n  <span class=\\\"token comment\\\">// Normally we recommend using `import` for getting asset URLs</span>\\n  <span class=\\\"token comment\\\">// as described in &#x201C;Adding Images and Fonts&#x201D; above this section.</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>img src<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>__PATH_PREFIX__ <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">&apos;/img/logo.png&apos;</span><span class=\\\"token punctuation\\\">}</span> alt<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;Logo&quot;</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">&gt;</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>请记住这种方法的缺点：</p>\\n<ul>\\n<li>静态文件夹中的文件都不会被后处理或缩小。</li>\\n<li>缺少的文件将不会在编译时被调用，并会导致您的用户产生404错误。</li>\\n<li>结果文件名将不会被散列，因此您需要添加查询参数或每次更改时重命名它们。</li>\\n</ul>\\n<h3 id=\\\"什么时候使用静态文件夹\\\"><a href=\\\"#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E5%A4%B9\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>什么时候使用静态文件夹</h3>\\n<p>通常我们建议从JavaScript导入样式表，图片和字体。 静态文件夹可用于解决一些不常见的情况：</p>\\n<ul>\\n<li>您需要在构建输出中使用具有特定名称的文件，例如<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/Manifest\\\">manifest.webmanifest</a>。</li>\\n<li>你有成千上万的图像，需要动态引用他们的路径。</li>\\n<li>你想在包装代码之外加入一个像<a href=\\\"http://github.hubspot.com/pace/docs/welcome/\\\">pace.js</a>这样的小脚本。</li>\\n<li>\\n<p>有些库可能与Webpack不兼容，除此之外，您没有别的选择，只能将其作为标签包含在内。</p>\\n\\n</li>\\n</ul>\",\"excerpt\":\"使用Webpack，您可以直接在JavaScript模块中Import(导入) 文件。 这告诉Webpack将该文件包含在该包中。 与CSS导入不同，导入文件会为您提供一个字符串值。 此值是您可以在代码中引用的最终路径，例如 作为图像的src属性或链接到PDF的href…\",\"timeToRead\":2,\"frontmatter\":{\"title\":\"添加图像，字体和文件\"},\"parent\":{\"__typename\":\"File\",\"relativePath\":\"docs/adding-images-fonts-files.md\"}}},\"pathContext\":{\"slug\":\"/docs/adding-images-fonts-files/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-adding-images-fonts-files.json\n// module id = 608\n// module chunks = 240794774872898"],"sourceRoot":""}