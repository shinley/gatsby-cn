{"version":3,"sources":["webpack:///path---docs-create-source-plugin-eb61de56c372d1745801.js","webpack:///./.cache/json/docs-create-source-plugin.json"],"names":["webpackJsonp","617","module","exports","data","markdownRemark","html","excerpt","timeToRead","frontmatter","title","parent","__typename","relativePath","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,swLAAgrJC,QAAA,gJAAAC,WAAA,EAAAC,aAA21CC,MAAA,0BAAiCC,QAAWC,WAAA,OAAAC,aAAA,kCAAoEC,aAAgBC,KAAA","file":"path---docs-create-source-plugin-eb61de56c372d1745801.js","sourcesContent":["webpackJsonp([273747921738987],{\n\n/***/ 617:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>There are two types of plugins that work within Gatsby’s data system, “source” and “transformer” plugins.</p>\\n<ul>\\n<li><strong>Source</strong> plugins “source” data from remote or local locations into what Gatsby calls <a href=\\\"/docs/node-interface/\\\">nodes</a>.</li>\\n<li><strong>Transformer</strong> plugins “transform” data provided by source plugins into new nodes and/or node fields.</li>\\n</ul>\\n<p>For example:</p>\\n<p>The <a href=\\\"/packages/gatsby-source-filesystem/\\\"><code>gatsby-source-filesystem</code></a>\\nplugin “sources” data about files from the file system. It creates nodes with\\na type <code>File</code>, each File node corresponding to a file on the filesystem. On\\neach node are fields like the <code>absolutePath</code>, <code>extension</code>, <code>modifiedTime</code>, etc.</p>\\n<p>And importantly, each node created by the filesystem source plugin includes the\\nraw content of the file and its <em>media type</em>.</p>\\n<p><a href=\\\"https://en.wikipedia.org/wiki/Media_type\\\">A <strong>media type</strong></a> (also <strong>MIME\\ntype</strong> and <strong>content type</strong>) are an official way to identify the format of\\nfiles/content that is transmitted on the internet e.g. over HTTP or through\\nemail. You’re probably familiar with many media types such as <code>application/javascript</code>,\\n<code>application/pdf</code>, <code>audio/mpeg</code>, <code>text/html</code>, <code>text/plain</code>, <code>image/jpeg</code>, etc.</p>\\n<p>Each source plugin is responsible for setting the media type for the nodes they\\ncreate. This way, source and transformer plugins can work together easily.</p>\\n<p>This is not a required field but it’s the way for source plugins to indicate to\\ntransformers that there is “raw” data that can still be further processed. It\\nallows plugins to remain small and focused. Source plugins don’t have to have\\nopinions on how to transform their data. They can just set the <code>mediaType</code> and\\npush that responsibility to transformer plugins.</p>\\n<p>For example, it’s quite common for services to allow you to add content as markdown.\\nIf you pull that markdown into Gatsby and create a new node, what then? How would\\na user of your source plugin convert that markdown into HTML they can use in\\ntheir site? Luckily you don’t have to do anything. Just create a node for the markdown\\ncontent and set its mediaType as <code>text/markdown</code> and the various Gatsby markdown transformer\\nplugins will see your node and transform it into HTML.</p>\\n<p>This loose coupling between data source and transformer plugins allow Gatsby site\\nbuilders to quickly assemble complex data transformation pipelines with little\\nwork on their (and your (the source plugin author)) part.</p>\\n<p>What does the code look like?</p>\\n<p>A source plugin is a normal NPM package. It has a package.json with optional\\ndependencies as well as a <code>gatsby-node.js</code> where you implement Gatsby’s Node.js\\nAPIs. Gatsby supports back node versions back to Node 4 and as it’s common to\\nwant to use more modern node.js and JavaScript syntax, many plugins write code\\nin a <code>src</code> directory and compile the code. All plugins maintained in the Gatsby\\nrepo follow this pattern.</p>\\n<p>Your <code>gatsby-node.js</code> should look something like:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>exports<span class=\\\"token punctuation\\\">.</span>sourceNodes <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> boundActionCreators <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> createNode <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> boundActionCreators\\n  <span class=\\\"token comment\\\">// Create nodes here, generally by downloading data</span>\\n  <span class=\\\"token comment\\\">// from a remote API.</span>\\n  <span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span>REMOTE_API<span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\">// Process data into nodes.</span>\\n  <span class=\\\"token comment\\\">// data.forEach(datum =&gt; createNode(processDatum(datum)))</span>\\n\\n  <span class=\\\"token comment\\\">// We&apos;re done, return.</span>\\n  <span class=\\\"token keyword\\\">return</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Puruse the <a href=\\\"/docs/node-apis/#sourceNodes\\\"><code>sourceNodes</code></a> and\\n<a href=\\\"/docs/bound-action-creators/#createNode\\\"><code>createNode</code></a> docs for detailed documentation\\non implementing those APIs.</p>\\n<p>But at a high-level, these are the jobs of a source plugin:</p>\\n<ul>\\n<li>Ensure local data is synced with its source and 100% accurate. If your\\nsource allows you to add an <code>updatedSince</code> query (or something similar) you\\ncan store the last time you fetched data using <a href=\\\"/docs/bound-action-creators/#setPluginStatus\\\"><code>setPluginStatus</code></a>.</li>\\n<li>Create nodes with accurate media types, human meaningful types, and accurate contentDigests.</li>\\n<li>“Link” nodes types you create as appropriate (see <a href=\\\"/docs/api-specification/\\\"><em>Node\\nLink</em></a> in the API specification concepts section.</li>\\n<li>Return either a promise or use the callback (3rd parameter) to report\\nback to Gatsby when you’re done sourcing nodes. Otherwise either Gatsby will continue on before\\nyou’re done sourcing or hang while waiting for you to indicate you’re finished.</li>\\n</ul>\",\"excerpt\":\"There are two types of plugins that work within Gatsby’s data system, “source” and “transformer” plugins. Source  plugins “source” data from…\",\"timeToRead\":3,\"frontmatter\":{\"title\":\"Create a source plugin\"},\"parent\":{\"__typename\":\"File\",\"relativePath\":\"docs/create-source-plugin.md\"}}},\"pathContext\":{\"slug\":\"/docs/create-source-plugin/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-create-source-plugin-eb61de56c372d1745801.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>There are two types of plugins that work within Gatsby’s data system, “source” and “transformer” plugins.</p>\\n<ul>\\n<li><strong>Source</strong> plugins “source” data from remote or local locations into what Gatsby calls <a href=\\\"/docs/node-interface/\\\">nodes</a>.</li>\\n<li><strong>Transformer</strong> plugins “transform” data provided by source plugins into new nodes and/or node fields.</li>\\n</ul>\\n<p>For example:</p>\\n<p>The <a href=\\\"/packages/gatsby-source-filesystem/\\\"><code>gatsby-source-filesystem</code></a>\\nplugin “sources” data about files from the file system. It creates nodes with\\na type <code>File</code>, each File node corresponding to a file on the filesystem. On\\neach node are fields like the <code>absolutePath</code>, <code>extension</code>, <code>modifiedTime</code>, etc.</p>\\n<p>And importantly, each node created by the filesystem source plugin includes the\\nraw content of the file and its <em>media type</em>.</p>\\n<p><a href=\\\"https://en.wikipedia.org/wiki/Media_type\\\">A <strong>media type</strong></a> (also <strong>MIME\\ntype</strong> and <strong>content type</strong>) are an official way to identify the format of\\nfiles/content that is transmitted on the internet e.g. over HTTP or through\\nemail. You’re probably familiar with many media types such as <code>application/javascript</code>,\\n<code>application/pdf</code>, <code>audio/mpeg</code>, <code>text/html</code>, <code>text/plain</code>, <code>image/jpeg</code>, etc.</p>\\n<p>Each source plugin is responsible for setting the media type for the nodes they\\ncreate. This way, source and transformer plugins can work together easily.</p>\\n<p>This is not a required field but it’s the way for source plugins to indicate to\\ntransformers that there is “raw” data that can still be further processed. It\\nallows plugins to remain small and focused. Source plugins don’t have to have\\nopinions on how to transform their data. They can just set the <code>mediaType</code> and\\npush that responsibility to transformer plugins.</p>\\n<p>For example, it’s quite common for services to allow you to add content as markdown.\\nIf you pull that markdown into Gatsby and create a new node, what then? How would\\na user of your source plugin convert that markdown into HTML they can use in\\ntheir site? Luckily you don’t have to do anything. Just create a node for the markdown\\ncontent and set its mediaType as <code>text/markdown</code> and the various Gatsby markdown transformer\\nplugins will see your node and transform it into HTML.</p>\\n<p>This loose coupling between data source and transformer plugins allow Gatsby site\\nbuilders to quickly assemble complex data transformation pipelines with little\\nwork on their (and your (the source plugin author)) part.</p>\\n<p>What does the code look like?</p>\\n<p>A source plugin is a normal NPM package. It has a package.json with optional\\ndependencies as well as a <code>gatsby-node.js</code> where you implement Gatsby’s Node.js\\nAPIs. Gatsby supports back node versions back to Node 4 and as it’s common to\\nwant to use more modern node.js and JavaScript syntax, many plugins write code\\nin a <code>src</code> directory and compile the code. All plugins maintained in the Gatsby\\nrepo follow this pattern.</p>\\n<p>Your <code>gatsby-node.js</code> should look something like:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>exports<span class=\\\"token punctuation\\\">.</span>sourceNodes <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> boundActionCreators <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> createNode <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> boundActionCreators\\n  <span class=\\\"token comment\\\">// Create nodes here, generally by downloading data</span>\\n  <span class=\\\"token comment\\\">// from a remote API.</span>\\n  <span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span>REMOTE_API<span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\">// Process data into nodes.</span>\\n  <span class=\\\"token comment\\\">// data.forEach(datum =&gt; createNode(processDatum(datum)))</span>\\n\\n  <span class=\\\"token comment\\\">// We&apos;re done, return.</span>\\n  <span class=\\\"token keyword\\\">return</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Puruse the <a href=\\\"/docs/node-apis/#sourceNodes\\\"><code>sourceNodes</code></a> and\\n<a href=\\\"/docs/bound-action-creators/#createNode\\\"><code>createNode</code></a> docs for detailed documentation\\non implementing those APIs.</p>\\n<p>But at a high-level, these are the jobs of a source plugin:</p>\\n<ul>\\n<li>Ensure local data is synced with its source and 100% accurate. If your\\nsource allows you to add an <code>updatedSince</code> query (or something similar) you\\ncan store the last time you fetched data using <a href=\\\"/docs/bound-action-creators/#setPluginStatus\\\"><code>setPluginStatus</code></a>.</li>\\n<li>Create nodes with accurate media types, human meaningful types, and accurate contentDigests.</li>\\n<li>“Link” nodes types you create as appropriate (see <a href=\\\"/docs/api-specification/\\\"><em>Node\\nLink</em></a> in the API specification concepts section.</li>\\n<li>Return either a promise or use the callback (3rd parameter) to report\\nback to Gatsby when you’re done sourcing nodes. Otherwise either Gatsby will continue on before\\nyou’re done sourcing or hang while waiting for you to indicate you’re finished.</li>\\n</ul>\",\"excerpt\":\"There are two types of plugins that work within Gatsby’s data system, “source” and “transformer” plugins. Source  plugins “source” data from…\",\"timeToRead\":3,\"frontmatter\":{\"title\":\"Create a source plugin\"},\"parent\":{\"__typename\":\"File\",\"relativePath\":\"docs/create-source-plugin.md\"}}},\"pathContext\":{\"slug\":\"/docs/create-source-plugin/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-create-source-plugin.json\n// module id = 617\n// module chunks = 273747921738987"],"sourceRoot":""}