webpackJsonp([27706344660178],{618:function(n,a){n.exports={data:{markdownRemark:{html:'<p>Gatsby可以很容易地以编程方式控制您的网页。</p>\n<p>页面可以通过三种方式创建：</p>\n<ul>\n<li>在你的网站的gatsby-node.js中通过实现API <a href="/docs/node-apis/#createPages">createPages</a></li>\n<li>Gatsby核心自动将src/pages中的React组件转换为页面</li>\n<li>插件也可以实现createPages并为你创建页面</li>\n</ul>\n<p>您也可以实现API onCreatePage来修改在核心或插件中创建的页面或创建仅客户端页面。</p>\n<h2 id="调试帮助"><a href="#%E8%B0%83%E8%AF%95%E5%B8%AE%E5%8A%A9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>调试帮助</h2>\n<p>要查看代码或插件正在创建哪些页面，可以在GraphiQL中开发时查询页面信息。 将以下查询粘贴到您的站点的GraphiQL IDE中。 在HOST:PORT/<strong>_ graphql上运行站点开发服务器时，可以使用GraphiQL IDE。localhost:8000/_</strong> graphql。</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code><span class="token punctuation">{</span>\n  allSitePage <span class="token punctuation">{</span>\n    edges <span class="token punctuation">{</span>\n      node <span class="token punctuation">{</span>\n        path\n        component\n        pluginCreator <span class="token punctuation">{</span>\n          name\n          pluginFilepath\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>您还可以查询上下文数据或插件添加到页面的数据。</p>\n<h2 id="在gatsby-nodejs中创建页面"><a href="#%E5%9C%A8gatsby-nodejs%E4%B8%AD%E5%88%9B%E5%BB%BA%E9%A1%B5%E9%9D%A2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>在gatsby-node.js中创建页面</h2>\n<p>通常您需要以编程方式创建页面。 例如，你有markdown 文件，每个文件应该是一个页面。</p>\n<p>此示例假定每个markdown 页面都有一个在markdown 文件的前端设置的“路径”。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment">//&#x5B9E;&#x73B0;Gatsby API &#x7684;&#x201C;createPages&#x201D;&#x3002; &#x8FD9;&#x88AB;&#x79F0;&#x4E3A;&#x4E00;&#x6B21;</span>\n<span class="token comment">//&#x6570;&#x636E;&#x5C42;&#x88AB;&#x5F15;&#x5BFC;&#xFF0C;&#x8BA9;&#x63D2;&#x4EF6;&#x4ECE;&#x6570;&#x636E;&#x4E2D;&#x521B;&#x5EFA;&#x9875;&#x9762;&#x3002;</span>\nexports<span class="token punctuation">.</span><span class="token function-variable function">createPages</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> boundActionCreators<span class="token punctuation">,</span> graphql <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> createPage <span class="token punctuation">}</span> <span class="token operator">=</span> boundActionCreators\n\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> blogPostTemplate <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`src/templates/blog-post.js`</span></span><span class="token punctuation">)</span>\n    <span class="token comment">// Query for markdown nodes to use in creating pages.</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span>\n      <span class="token function">graphql</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token string">`\n      {\n        allMarkdownRemark(limit: 1000) {\n          edges {\n            node {\n              frontmatter {\n                path\n              }\n            }\n          }\n        }\n      }\n    `</span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>errors<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">reject</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// Create pages for each markdown file.</span>\n        result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>allMarkdownRemark<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> node <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> path <span class="token operator">=</span> node<span class="token punctuation">.</span>frontmatter<span class="token punctuation">.</span>path<span class="token punctuation">;</span>\n          <span class="token function">createPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            path<span class="token punctuation">,</span>\n            component<span class="token punctuation">:</span> blogPostTemplate<span class="token punctuation">,</span>\n            <span class="token comment">// If you have a layout component at src/layouts/blog-layout.js</span>\n            layout<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`blog-layout`</span></span><span class="token punctuation">,</span>\n            <span class="token comment">// In your blog post template&apos;s graphql query, you can use path</span>\n            <span class="token comment">// as a GraphQL variable to query for data from the markdown file.</span>\n            context<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              path<span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2 id="修改由核心或插件创建的页面"><a href="#%E4%BF%AE%E6%94%B9%E7%94%B1%E6%A0%B8%E5%BF%83%E6%88%96%E6%8F%92%E4%BB%B6%E5%88%9B%E5%BB%BA%E7%9A%84%E9%A1%B5%E9%9D%A2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>修改由核心或插件创建的页面</h2>\n<p>Gatsby核心和插件可以自动为您创建页面。 有时默认不是你想要的，你需要修改创建的页面对象。</p>\n<h3 id="删除尾部的斜杠"><a href="#%E5%88%A0%E9%99%A4%E5%B0%BE%E9%83%A8%E7%9A%84%E6%96%9C%E6%9D%A0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>删除尾部的斜杠</h3>\n<p>需要修改自动创建的页面的一个常见原因是删除结尾的斜线。</p>\n<p>要做到这一点，在您的网站的gatsby-node.js添加代码类似于以下内容：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment">//&#x5B9E;&#x73B0;Gatsby AP I&#x201C;onCreatePage&#x201D;&#x3002; &#x8FD9;&#x662F;</span>\n<span class="token comment">//&#x5728;&#x521B;&#x5EFA;&#x6BCF;&#x4E2A;&#x9875;&#x9762;&#x540E;&#x8C03;&#x7528;&#x3002;</span>\nexports<span class="token punctuation">.</span><span class="token function-variable function">onCreatePage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page<span class="token punctuation">,</span> boundActionCreators <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> createPage<span class="token punctuation">,</span> deletePage <span class="token punctuation">}</span> <span class="token operator">=</span> boundActionCreators\n\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Remove trailing slash</span>\n    <span class="token keyword">const</span> newPage <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> page<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      path<span class="token punctuation">:</span> page<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token template-string"><span class="token string">`/`</span></span> <span class="token operator">?</span> page<span class="token punctuation">.</span>path <span class="token punctuation">:</span> page<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\\/$/</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">``</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>newPage<span class="token punctuation">.</span>path <span class="token operator">!==</span> page<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Remove the old page</span>\n      <span class="token function">deletePage</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>\n      <span class="token comment">// Add the new page</span>\n      <span class="token function">createPage</span><span class="token punctuation">(</span>newPage<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3 id="创建client-only-（仅客户端）路由"><a href="#%E5%88%9B%E5%BB%BAclient-only-%EF%BC%88%E4%BB%85%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89%E8%B7%AF%E7%94%B1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>创建client-only （仅客户端）路由</h3>\n<p>如果你正在创建一个“hybrid”的Gatsby应用程序，包括静态渲染的页面以及客户端路线， 一个结合了营销页面和你的应用程序，在/app/*下的应用程序，你想添加代码到你的gatsby-node.js，如下所示：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment">//&#x5B9E;&#x73B0;Gatsby API&#x201C;onCreatePage&#x201D;&#x3002; &#x8FD9;&#x662F;</span>\n<span class="token comment">//&#x5728;&#x521B;&#x5EFA;&#x6BCF;&#x4E2A;&#x9875;&#x9762;&#x540E;&#x8C03;&#x7528;&#x3002;</span>\nexports<span class="token punctuation">.</span>onCreatePage <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page<span class="token punctuation">,</span> boundActionCreators <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> createPage <span class="token punctuation">}</span> <span class="token operator">=</span> boundActionCreators\n\n  <span class="token comment">// page.matchPath is a special key that&apos;s used for matching pages</span>\n  <span class="token comment">// only on the client.</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^\\/app/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    page<span class="token punctuation">.</span>matchPath <span class="token operator">=</span> <span class="token string">&quot;/app/:path&quot;</span>\n\n    <span class="token comment">// Update the page.</span>\n    <span class="token function">createPage</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3 id="选择页面布局"><a href="#%E9%80%89%E6%8B%A9%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>选择页面布局</h3>\n<p>默认情况下，所有页面将使用在/layouts/index.js中找到的布局。</p>\n<p>您可能希望为某些页面选择自定义布局（例如删除登录页面的页眉和页脚）。 在使用createPage操作创建页面时，可以通过向页面对象添加布局键或使用onCreatePage API修改其他位置创建的页面来选择布局组件。 /layouts/目录中的所有组件都是自动可用的。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment">//&#x5B9E;&#x73B0;Gatsby API&#x201C;onCreatePage&#x201D;&#x3002; &#x8FD9;&#x662F;</span>\n<span class="token comment">//&#x5728;&#x521B;&#x5EFA;&#x6BCF;&#x4E2A;&#x9875;&#x9762;&#x540E;&#x8C03;&#x7528;&#x3002;</span>\nexports<span class="token punctuation">.</span>onCreatePage <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page<span class="token punctuation">,</span> boundActionCreators <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> createPage <span class="token punctuation">}</span> <span class="token operator">=</span> boundActionCreators\n\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^\\/landing-page/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// It&apos;s assumed that `landingPage.js` exists in the `/layouts/` directory</span>\n      page<span class="token punctuation">.</span>layout <span class="token operator">=</span> <span class="token string">&quot;landingPage&quot;</span>\n\n      <span class="token comment">// Update the page.</span>\n      <span class="token function">createPage</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>',excerpt:"Gatsby可以很容易地以编程方式控制您的网页。 页面可以通过三种方式创建： 在你的网站的gatsby-node.js中通过实现API  createPages Gatsby核心自动将src/pages中的React组件转换为页面 插件也可以实现createPages…",timeToRead:3,frontmatter:{title:"创建和修改页面"},parent:{__typename:"File",relativePath:"docs/creating-and-modifying-pages.md"}}},pathContext:{slug:"/docs/creating-and-modifying-pages/"}}}});
//# sourceMappingURL=path---docs-creating-and-modifying-pages-480d7a11c400c603c7f1.js.map