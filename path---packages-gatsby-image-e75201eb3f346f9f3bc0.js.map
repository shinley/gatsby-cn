{"version":3,"sources":["webpack:///path---packages-gatsby-image-e75201eb3f346f9f3bc0.js","webpack:///./.cache/json/packages-gatsby-image.json"],"names":["webpackJsonp","650","module","exports","data","markdownRemark","html","excerpt","timeToRead","fields","title","parent","__typename","relativePath","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,myqBAA+krBC,QAAA,gJAAAC,WAAA,EAAAC,QAAkZC,MAAA,gBAAuBC,QAAWC,WAAA,OAAAC,aAAA,4BAA8DC,aAAgBC,KAAA","file":"path---packages-gatsby-image-e75201eb3f346f9f3bc0.js","sourcesContent":["webpackJsonp([265590291376852],{\n\n/***/ 650:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"gatsby-image\\\"><a href=\\\"#gatsby-image\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>gatsby-image</h1>\\n<p>Speedy, optimized images without the work.</p>\\n<p><code>gatsby-image</code> is a React component specially designed to work seamlessly with Gatsby’s GraphQL queries. It combines <a href=\\\"https://image-processing.gatsbyjs.org/\\\">Gatsby’s native image processing</a> capabilities with advanced image loading techniques to easily and completely optimize image loading for your sites.</p>\\n<p><strong><a href=\\\"https://using-gatsby-image.gatsbyjs.org\\\">Demo</a></strong></p>\\n<h2 id=\\\"problem\\\"><a href=\\\"#problem\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Problem</h2>\\n<p>Large, unoptimized images dramatically slow down your site.</p>\\n<p>But creating optimized images for websites has long been a thorny problem. Ideally you would:</p>\\n<ul>\\n<li>Resize large images to the size needed by your design</li>\\n<li>Generate multiple smaller images so smartphones and tablets don’t download desktop-sized images</li>\\n<li>Strip all unnecessary metadata and optimize JPEG and PNG compression</li>\\n<li>Efficiently lazy load images to speed initial page load and save bandwidth</li>\\n<li>Use the “blur-up” technique or a ”<a href=\\\"https://github.com/gatsbyjs/gatsby/issues/2435\\\">traced placeholder</a>” SVG to show a preview of the image while it loads</li>\\n<li>Hold the image position so your page doesn’t jump while images load</li>\\n</ul>\\n<p>Doing this consistantly across a site feels like sisyphean labor. You manually optimize your images and then… several images are swapped in at the last minute or a design-tweak shaves 100px of width off your images.</p>\\n<p>Most solutions involve a lot of manual labor and bookkeeping to ensure every image is optimized.</p>\\n<p>This isn’t ideal. Optimized images should be easy and the default.</p>\\n<h2 id=\\\"solution\\\"><a href=\\\"#solution\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Solution</h2>\\n<p>With Gatsby, we can make images way <em>way</em> better.</p>\\n<p><code>gatsby-image</code> is designed to work seamlessly with Gatsby’s native image processing capabilities powered by GraphQL and Sharp. To produce\\nperfect images, you need only:</p>\\n<ol>\\n<li>Import <code>gatsby-image</code> and use it in place of the built-in <code>img</code></li>\\n<li>Write a simple GraphQL query using one of the included GraphQL “fragments” which specify the fields needed by <code>gatsby-image</code>.</li>\\n</ol>\\n<p>The GraphQL query creates multiple thumbnails with optimized JPEG and PNG compression. The <code>gatsby-image</code> component automatically sets up the “blur-up” effect as well as lazy loading of images further down the screen.</p>\\n<p>This is what a component using <code>gatsby-images</code> looks like.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">&apos;react&apos;</span>\\n<span class=\\\"token keyword\\\">import</span> Img <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">&apos;gatsby-image&apos;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">&gt;</span></span>Hello gatsby<span class=\\\"token operator\\\">-</span>image<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Img</span> <span class=\\\"token attr-name\\\">resolutions</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>data<span class=\\\"token punctuation\\\">.</span>file<span class=\\\"token punctuation\\\">.</span>childImageSharp<span class=\\\"token punctuation\\\">.</span>resolutions<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/&gt;</span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> query <span class=\\\"token operator\\\">=</span> graphql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n  query GatsbyImageSampleQuery {\\n    file(relativePath: { eq: &quot;blog/avatars/kyle-mathews.jpeg&quot;}) {\\n      childImageSharp {\\n        # Specify the image processing steps right in the query\\n        # Makes it trivial to update as your page&apos;s design changes.\\n        resolutions(width: 125, height: 125) {\\n          ...GatsbyImageSharpResolutions\\n        }\\n      }\\n    }\\n  }\\n`</span></span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"two-types-of-responsive-images\\\"><a href=\\\"#two-types-of-responsive-images\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Two types of responsive images</h2>\\n<p>There are two types of responsive images supported by gatsby-image.</p>\\n<ol>\\n<li>Images that have a <em>fixed</em> width and height</li>\\n<li>Images that stretch across a fluid container</li>\\n</ol>\\n<p>In the first scenario, you want to vary the image’s size for different screen <em>resolutions</em> — in other words, create retina images.</p>\\n<p>For the second scenario, you want to create multiple <em>sizes</em> of thumbnails for devices with widths stretching from smartphone to wide desktop monitors.</p>\\n<p>To decide between the two, ask yourself: “do I know the exact size this image will be?” If yes, it’s the first type. If no and its width and/or height need to vary depending on the size of the screen, then it’s the second type.</p>\\n<p>In Gatsby’s GraphQL implementation, you query for the first type by querying a child object of an image called <code>resolutions</code> — which you can see in the sample component above. For the second type, you do a similar query but for a child object called <code>sizes</code>.</p>\\n<h2 id=\\\"fragments\\\"><a href=\\\"#fragments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Fragments</h2>\\n<p>GraphQL includes a concept called “query fragments”. Which, as the name suggests, are a part of a query that can be used in multiple queries. To ease building with <code>gatsby-image</code>, Gatsby image processing plugins which support <code>gatsby-image</code> ship with fragments which you can easily include in your queries.</p>\\n<p>Note, <a href=\\\"https://github.com/graphql/graphiql/issues/612\\\">due to a limitation of GraphiQL</a>, you can not currently use these fragments in the GraphiQL IDE.</p>\\n<p>Plugins supporting <code>gatsby-image</code> currently include <a href=\\\"/packages/gatsby-transformer-sharp/\\\">gatsby-transformer-sharp</a> and <a href=\\\"/packages/gatsby-source-contentful/\\\">gatsby-source-contentful</a>.</p>\\n<p>Their fragments are:</p>\\n<h3 id=\\\"gatsby-transformer-sharp\\\"><a href=\\\"#gatsby-transformer-sharp\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>gatsby-transformer-sharp</h3>\\n<ul>\\n<li><code>GatsbyImageSharpResolutions</code></li>\\n<li><code>GatsbyImageSharpResolutions_noBase64</code></li>\\n<li><code>GatsbyImageSharpResolutions_tracedSVG</code></li>\\n<li><code>GatsbyImageSharpResolutions_withWebp</code></li>\\n<li><code>GatsbyImageSharpResolutions_withWebp_noBase64</code></li>\\n<li><code>GatsbyImageSharpResolutions_withWebp_tracedSVG</code></li>\\n<li><code>GatsbyImageSharpSizes</code></li>\\n<li><code>GatsbyImageSharpSizes_noBase64</code></li>\\n<li><code>GatsbyImageSharpSizes_tracedSVG</code></li>\\n<li><code>GatsbyImageSharpSizes_withWebp</code></li>\\n<li><code>GatsbyImageSharpSizes_withWebp_noBase64</code></li>\\n<li><code>GatsbyImageSharpSizes_withWebp_tracedSVG</code></li>\\n</ul>\\n<h3 id=\\\"gatsby-source-contentful\\\"><a href=\\\"#gatsby-source-contentful\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>gatsby-source-contentful</h3>\\n<ul>\\n<li><code>GatsbyContentfulResolutions</code></li>\\n<li><code>GatsbyContentfulResolutions_noBase64</code></li>\\n<li><code>GatsbyContentfulSizes</code></li>\\n<li><code>GatsbyContentfulSizes_noBase64</code></li>\\n</ul>\\n<p>If you don’t want to use the blur-up effect, choose the fragment with <code>noBase64</code> at the end. If you want to use the traced placeholder SVGs, choose the fragment with <code>tracedSVG</code> at the end.</p>\\n<p>If you want to automatically use WebP images when the browser supports the file format, use the <code>withWebp</code> fragments. If the browser doesn’t support WebP, <code>gatsby-image</code> will fall back to the default image format.</p>\\n<p><em>Please see the <a href=\\\"https://www.gatsbyjs.org/packages/gatsby-plugin-sharp/#tracedsvg\\\">gatsby-plugin-sharp</a> documentation for more information on <code>tracedSVG</code> and its configuration options.</em></p>\\n<h2 id=\\\"resolutions-queries\\\"><a href=\\\"#resolutions-queries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>“Resolutions” queries</h2>\\n<h3 id=\\\"component\\\"><a href=\\\"#component\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Component</h3>\\n<p>Pass in the data returned from the <code>resolutions</code> object in your query via the <code>resolutions</code> prop. e.g. <code>&#x3C;Img resolutions={resolutions} /></code></p>\\n<h3 id=\\\"query\\\"><a href=\\\"#query\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Query</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-graphql\\\"><code><span class=\\\"token punctuation\\\">{</span>\\n  imageSharp <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\"># Other options include height (set both width and height to crop),</span>\\n    <span class=\\\"token comment\\\"># grayscale, duotone, rotate, etc.</span>\\n    resolutions<span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">width</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">400</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\"># Choose either the fragment including a small base64ed image, a traced placeholder SVG, or one without.</span>\\n      <span class=\\\"token operator\\\">...</span>GatsbyImageSharpResolutions\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"sizes-queries\\\"><a href=\\\"#sizes-queries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>“Sizes” queries</h2>\\n<h3 id=\\\"component-1\\\"><a href=\\\"#component-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Component</h3>\\n<p>Pass in the data returned from the <code>sizes</code> object in your query via the <code>sizes</code> prop. e.g. <code>&#x3C;Img sizes={sizes} /></code></p>\\n<h3 id=\\\"query-1\\\"><a href=\\\"#query-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Query</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-graphql\\\"><code><span class=\\\"token punctuation\\\">{</span>\\n  imageSharp <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\"># i.e. the max width of your container is 700 pixels.</span>\\n    <span class=\\\"token comment\\\">#</span>\\n    <span class=\\\"token comment\\\"># Other options include maxHeight (set both maxWidth and maxHeight to crop),</span>\\n    <span class=\\\"token comment\\\"># grayscale, duotone, rotate, etc.</span>\\n    sizes<span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">maxWidth</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">700</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\"># Choose either the fragment including a small base64ed image, a traced placeholder SVG, or one without.</span>\\n      <span class=\\\"token operator\\\">...</span>GatsbyImageSharpSizes_noBase64\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"gatsby-image-props\\\"><a href=\\\"#gatsby-image-props\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>gatsby-image</code> props</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>resolutions</code></td>\\n<td><code>object</code></td>\\n<td>Data returned from the \\n<code>resolutions</code>\\n query</td>\\n</tr>\\n<tr>\\n<td><code>sizes</code></td>\\n<td><code>object</code></td>\\n<td>Data returned from the \\n<code>sizes</code>\\n query</td>\\n</tr>\\n<tr>\\n<td><code>fadeIn</code></td>\\n<td><code>bool</code></td>\\n<td>Defaults to fading in the image on load</td>\\n</tr>\\n<tr>\\n<td><code>title</code></td>\\n<td><code>string</code></td>\\n<td>Passed to the \\n<code>img</code>\\n element</td>\\n</tr>\\n<tr>\\n<td><code>alt</code></td>\\n<td><code>string</code></td>\\n<td>Passed to the \\n<code>img</code>\\n element</td>\\n</tr>\\n<tr>\\n<td><code>className</code></td>\\n<td><code>string\\\\|object</code></td>\\n<td>Passed to the wrapper div. Object is needed to support Glamor’s css prop</td>\\n</tr>\\n<tr>\\n<td><code>outerWrapperClassName</code></td>\\n<td><code>string\\\\|object</code></td>\\n<td>Passed to the outer wrapper div. Object is needed to support Glamor’s css prop</td>\\n</tr>\\n<tr>\\n<td><code>style</code></td>\\n<td><code>object</code></td>\\n<td>Spread into the default styles in the wrapper div</td>\\n</tr>\\n<tr>\\n<td><code>position</code></td>\\n<td><code>string</code></td>\\n<td>Defaults to \\n<code>relative</code>\\n. Pass in \\n<code>absolute</code>\\n to make the component \\n<code>absolute</code>\\n positioned</td>\\n</tr>\\n<tr>\\n<td><code>backgroundColor</code></td>\\n<td><code>string\\\\|bool</code></td>\\n<td>Set a colored background placeholder. If true, uses “lightgray” for the color. You can also pass in any valid color string.</td>\\n</tr>\\n<tr>\\n<td><code>onLoad</code></td>\\n<td><code>func</code></td>\\n<td>A callback that is called when the full-size image has loaded.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"some-other-stuff-to-be-aware-of\\\"><a href=\\\"#some-other-stuff-to-be-aware-of\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Some other stuff to be aware of</h2>\\n<ul>\\n<li>If you want to set <code>display: none;</code> on a component using a <code>resolutions</code> prop, you need to also pass in to the style prop <code>{ display: 'inherit' }</code>.* Images don’t load until JavaScript is loaded. Gatsby’s automatic code splitting generally makes this fine but if images seem slow coming in on a page, check how much JavaScript is being loaded there.</li>\\n</ul>\",\"excerpt\":\"gatsby-image Speedy, optimized images without the work. gatsby-image  is a React component specially designed to work seamlessly with Gatsby…\",\"timeToRead\":7,\"fields\":{\"title\":\"gatsby-image\"},\"parent\":{\"__typename\":\"File\",\"relativePath\":\"gatsby-image/README.md\"}}},\"pathContext\":{\"slug\":\"/packages/gatsby-image/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---packages-gatsby-image-e75201eb3f346f9f3bc0.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"gatsby-image\\\"><a href=\\\"#gatsby-image\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>gatsby-image</h1>\\n<p>Speedy, optimized images without the work.</p>\\n<p><code>gatsby-image</code> is a React component specially designed to work seamlessly with Gatsby’s GraphQL queries. It combines <a href=\\\"https://image-processing.gatsbyjs.org/\\\">Gatsby’s native image processing</a> capabilities with advanced image loading techniques to easily and completely optimize image loading for your sites.</p>\\n<p><strong><a href=\\\"https://using-gatsby-image.gatsbyjs.org\\\">Demo</a></strong></p>\\n<h2 id=\\\"problem\\\"><a href=\\\"#problem\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Problem</h2>\\n<p>Large, unoptimized images dramatically slow down your site.</p>\\n<p>But creating optimized images for websites has long been a thorny problem. Ideally you would:</p>\\n<ul>\\n<li>Resize large images to the size needed by your design</li>\\n<li>Generate multiple smaller images so smartphones and tablets don’t download desktop-sized images</li>\\n<li>Strip all unnecessary metadata and optimize JPEG and PNG compression</li>\\n<li>Efficiently lazy load images to speed initial page load and save bandwidth</li>\\n<li>Use the “blur-up” technique or a ”<a href=\\\"https://github.com/gatsbyjs/gatsby/issues/2435\\\">traced placeholder</a>” SVG to show a preview of the image while it loads</li>\\n<li>Hold the image position so your page doesn’t jump while images load</li>\\n</ul>\\n<p>Doing this consistantly across a site feels like sisyphean labor. You manually optimize your images and then… several images are swapped in at the last minute or a design-tweak shaves 100px of width off your images.</p>\\n<p>Most solutions involve a lot of manual labor and bookkeeping to ensure every image is optimized.</p>\\n<p>This isn’t ideal. Optimized images should be easy and the default.</p>\\n<h2 id=\\\"solution\\\"><a href=\\\"#solution\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Solution</h2>\\n<p>With Gatsby, we can make images way <em>way</em> better.</p>\\n<p><code>gatsby-image</code> is designed to work seamlessly with Gatsby’s native image processing capabilities powered by GraphQL and Sharp. To produce\\nperfect images, you need only:</p>\\n<ol>\\n<li>Import <code>gatsby-image</code> and use it in place of the built-in <code>img</code></li>\\n<li>Write a simple GraphQL query using one of the included GraphQL “fragments” which specify the fields needed by <code>gatsby-image</code>.</li>\\n</ol>\\n<p>The GraphQL query creates multiple thumbnails with optimized JPEG and PNG compression. The <code>gatsby-image</code> component automatically sets up the “blur-up” effect as well as lazy loading of images further down the screen.</p>\\n<p>This is what a component using <code>gatsby-images</code> looks like.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">&apos;react&apos;</span>\\n<span class=\\\"token keyword\\\">import</span> Img <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">&apos;gatsby-image&apos;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">&gt;</span></span>Hello gatsby<span class=\\\"token operator\\\">-</span>image<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Img</span> <span class=\\\"token attr-name\\\">resolutions</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>data<span class=\\\"token punctuation\\\">.</span>file<span class=\\\"token punctuation\\\">.</span>childImageSharp<span class=\\\"token punctuation\\\">.</span>resolutions<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/&gt;</span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> query <span class=\\\"token operator\\\">=</span> graphql<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n  query GatsbyImageSampleQuery {\\n    file(relativePath: { eq: &quot;blog/avatars/kyle-mathews.jpeg&quot;}) {\\n      childImageSharp {\\n        # Specify the image processing steps right in the query\\n        # Makes it trivial to update as your page&apos;s design changes.\\n        resolutions(width: 125, height: 125) {\\n          ...GatsbyImageSharpResolutions\\n        }\\n      }\\n    }\\n  }\\n`</span></span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"two-types-of-responsive-images\\\"><a href=\\\"#two-types-of-responsive-images\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Two types of responsive images</h2>\\n<p>There are two types of responsive images supported by gatsby-image.</p>\\n<ol>\\n<li>Images that have a <em>fixed</em> width and height</li>\\n<li>Images that stretch across a fluid container</li>\\n</ol>\\n<p>In the first scenario, you want to vary the image’s size for different screen <em>resolutions</em> — in other words, create retina images.</p>\\n<p>For the second scenario, you want to create multiple <em>sizes</em> of thumbnails for devices with widths stretching from smartphone to wide desktop monitors.</p>\\n<p>To decide between the two, ask yourself: “do I know the exact size this image will be?” If yes, it’s the first type. If no and its width and/or height need to vary depending on the size of the screen, then it’s the second type.</p>\\n<p>In Gatsby’s GraphQL implementation, you query for the first type by querying a child object of an image called <code>resolutions</code> — which you can see in the sample component above. For the second type, you do a similar query but for a child object called <code>sizes</code>.</p>\\n<h2 id=\\\"fragments\\\"><a href=\\\"#fragments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Fragments</h2>\\n<p>GraphQL includes a concept called “query fragments”. Which, as the name suggests, are a part of a query that can be used in multiple queries. To ease building with <code>gatsby-image</code>, Gatsby image processing plugins which support <code>gatsby-image</code> ship with fragments which you can easily include in your queries.</p>\\n<p>Note, <a href=\\\"https://github.com/graphql/graphiql/issues/612\\\">due to a limitation of GraphiQL</a>, you can not currently use these fragments in the GraphiQL IDE.</p>\\n<p>Plugins supporting <code>gatsby-image</code> currently include <a href=\\\"/packages/gatsby-transformer-sharp/\\\">gatsby-transformer-sharp</a> and <a href=\\\"/packages/gatsby-source-contentful/\\\">gatsby-source-contentful</a>.</p>\\n<p>Their fragments are:</p>\\n<h3 id=\\\"gatsby-transformer-sharp\\\"><a href=\\\"#gatsby-transformer-sharp\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>gatsby-transformer-sharp</h3>\\n<ul>\\n<li><code>GatsbyImageSharpResolutions</code></li>\\n<li><code>GatsbyImageSharpResolutions_noBase64</code></li>\\n<li><code>GatsbyImageSharpResolutions_tracedSVG</code></li>\\n<li><code>GatsbyImageSharpResolutions_withWebp</code></li>\\n<li><code>GatsbyImageSharpResolutions_withWebp_noBase64</code></li>\\n<li><code>GatsbyImageSharpResolutions_withWebp_tracedSVG</code></li>\\n<li><code>GatsbyImageSharpSizes</code></li>\\n<li><code>GatsbyImageSharpSizes_noBase64</code></li>\\n<li><code>GatsbyImageSharpSizes_tracedSVG</code></li>\\n<li><code>GatsbyImageSharpSizes_withWebp</code></li>\\n<li><code>GatsbyImageSharpSizes_withWebp_noBase64</code></li>\\n<li><code>GatsbyImageSharpSizes_withWebp_tracedSVG</code></li>\\n</ul>\\n<h3 id=\\\"gatsby-source-contentful\\\"><a href=\\\"#gatsby-source-contentful\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>gatsby-source-contentful</h3>\\n<ul>\\n<li><code>GatsbyContentfulResolutions</code></li>\\n<li><code>GatsbyContentfulResolutions_noBase64</code></li>\\n<li><code>GatsbyContentfulSizes</code></li>\\n<li><code>GatsbyContentfulSizes_noBase64</code></li>\\n</ul>\\n<p>If you don’t want to use the blur-up effect, choose the fragment with <code>noBase64</code> at the end. If you want to use the traced placeholder SVGs, choose the fragment with <code>tracedSVG</code> at the end.</p>\\n<p>If you want to automatically use WebP images when the browser supports the file format, use the <code>withWebp</code> fragments. If the browser doesn’t support WebP, <code>gatsby-image</code> will fall back to the default image format.</p>\\n<p><em>Please see the <a href=\\\"https://www.gatsbyjs.org/packages/gatsby-plugin-sharp/#tracedsvg\\\">gatsby-plugin-sharp</a> documentation for more information on <code>tracedSVG</code> and its configuration options.</em></p>\\n<h2 id=\\\"resolutions-queries\\\"><a href=\\\"#resolutions-queries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>“Resolutions” queries</h2>\\n<h3 id=\\\"component\\\"><a href=\\\"#component\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Component</h3>\\n<p>Pass in the data returned from the <code>resolutions</code> object in your query via the <code>resolutions</code> prop. e.g. <code>&#x3C;Img resolutions={resolutions} /></code></p>\\n<h3 id=\\\"query\\\"><a href=\\\"#query\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Query</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-graphql\\\"><code><span class=\\\"token punctuation\\\">{</span>\\n  imageSharp <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\"># Other options include height (set both width and height to crop),</span>\\n    <span class=\\\"token comment\\\"># grayscale, duotone, rotate, etc.</span>\\n    resolutions<span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">width</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">400</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\"># Choose either the fragment including a small base64ed image, a traced placeholder SVG, or one without.</span>\\n      <span class=\\\"token operator\\\">...</span>GatsbyImageSharpResolutions\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"sizes-queries\\\"><a href=\\\"#sizes-queries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>“Sizes” queries</h2>\\n<h3 id=\\\"component-1\\\"><a href=\\\"#component-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Component</h3>\\n<p>Pass in the data returned from the <code>sizes</code> object in your query via the <code>sizes</code> prop. e.g. <code>&#x3C;Img sizes={sizes} /></code></p>\\n<h3 id=\\\"query-1\\\"><a href=\\\"#query-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Query</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-graphql\\\"><code><span class=\\\"token punctuation\\\">{</span>\\n  imageSharp <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\"># i.e. the max width of your container is 700 pixels.</span>\\n    <span class=\\\"token comment\\\">#</span>\\n    <span class=\\\"token comment\\\"># Other options include maxHeight (set both maxWidth and maxHeight to crop),</span>\\n    <span class=\\\"token comment\\\"># grayscale, duotone, rotate, etc.</span>\\n    sizes<span class=\\\"token punctuation\\\">(</span><span class=\\\"token attr-name\\\">maxWidth</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">700</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\"># Choose either the fragment including a small base64ed image, a traced placeholder SVG, or one without.</span>\\n      <span class=\\\"token operator\\\">...</span>GatsbyImageSharpSizes_noBase64\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"gatsby-image-props\\\"><a href=\\\"#gatsby-image-props\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>gatsby-image</code> props</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>resolutions</code></td>\\n<td><code>object</code></td>\\n<td>Data returned from the \\n<code>resolutions</code>\\n query</td>\\n</tr>\\n<tr>\\n<td><code>sizes</code></td>\\n<td><code>object</code></td>\\n<td>Data returned from the \\n<code>sizes</code>\\n query</td>\\n</tr>\\n<tr>\\n<td><code>fadeIn</code></td>\\n<td><code>bool</code></td>\\n<td>Defaults to fading in the image on load</td>\\n</tr>\\n<tr>\\n<td><code>title</code></td>\\n<td><code>string</code></td>\\n<td>Passed to the \\n<code>img</code>\\n element</td>\\n</tr>\\n<tr>\\n<td><code>alt</code></td>\\n<td><code>string</code></td>\\n<td>Passed to the \\n<code>img</code>\\n element</td>\\n</tr>\\n<tr>\\n<td><code>className</code></td>\\n<td><code>string\\\\|object</code></td>\\n<td>Passed to the wrapper div. Object is needed to support Glamor’s css prop</td>\\n</tr>\\n<tr>\\n<td><code>outerWrapperClassName</code></td>\\n<td><code>string\\\\|object</code></td>\\n<td>Passed to the outer wrapper div. Object is needed to support Glamor’s css prop</td>\\n</tr>\\n<tr>\\n<td><code>style</code></td>\\n<td><code>object</code></td>\\n<td>Spread into the default styles in the wrapper div</td>\\n</tr>\\n<tr>\\n<td><code>position</code></td>\\n<td><code>string</code></td>\\n<td>Defaults to \\n<code>relative</code>\\n. Pass in \\n<code>absolute</code>\\n to make the component \\n<code>absolute</code>\\n positioned</td>\\n</tr>\\n<tr>\\n<td><code>backgroundColor</code></td>\\n<td><code>string\\\\|bool</code></td>\\n<td>Set a colored background placeholder. If true, uses “lightgray” for the color. You can also pass in any valid color string.</td>\\n</tr>\\n<tr>\\n<td><code>onLoad</code></td>\\n<td><code>func</code></td>\\n<td>A callback that is called when the full-size image has loaded.</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"some-other-stuff-to-be-aware-of\\\"><a href=\\\"#some-other-stuff-to-be-aware-of\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Some other stuff to be aware of</h2>\\n<ul>\\n<li>If you want to set <code>display: none;</code> on a component using a <code>resolutions</code> prop, you need to also pass in to the style prop <code>{ display: 'inherit' }</code>.* Images don’t load until JavaScript is loaded. Gatsby’s automatic code splitting generally makes this fine but if images seem slow coming in on a page, check how much JavaScript is being loaded there.</li>\\n</ul>\",\"excerpt\":\"gatsby-image Speedy, optimized images without the work. gatsby-image  is a React component specially designed to work seamlessly with Gatsby…\",\"timeToRead\":7,\"fields\":{\"title\":\"gatsby-image\"},\"parent\":{\"__typename\":\"File\",\"relativePath\":\"gatsby-image/README.md\"}}},\"pathContext\":{\"slug\":\"/packages/gatsby-image/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/packages-gatsby-image.json\n// module id = 650\n// module chunks = 265590291376852"],"sourceRoot":""}