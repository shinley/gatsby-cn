webpackJsonp([0xbf676ea57052],{717:function(n,x){n.exports={data:{markdownRemark:{html:'<p>欢迎来到Gatsby教程的第二部分！</p>\n<p>在这一部分，我们将探索Gatsby网站的样式选择，并深入探讨如何使用React组件来构建网站。</p>\n<h2 id="用组件构建"><a href="#%E7%94%A8%E7%BB%84%E4%BB%B6%E6%9E%84%E5%BB%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>用组件构建</h2>\n<p>在开始构建组件时，您所做的一个重大转变就是现在您的CSS，HTML和JavaScript紧密结合，甚至在同一个文件中也是如此。</p>\n<p>虽然看似简单的变化，但它对于如何考虑构建网站有着深远的影响。</p>\n<p>以创建自定义按钮的简单示例为例。 在过去，你会创建一个CSS类（可能.primary-button）与你的自定义样式，然后当你想要应用这些样式，例如</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>primary-button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  Click me\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n      </div>\n<p>在组件的世界中，您可以使用按钮样式创建一个PrimaryButton组件，并在整个站点中使用它，如下所示：</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PrimaryButton</span><span class="token punctuation">&gt;</span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PrimaryButton</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n      </div>\n<p>组件成为您网站的基础构建块。 而不仅限于浏览器提供的内容，例如 <button></button>，您可以轻松地创建优雅地满足项目需求的新建筑模块。 </p>\n<h2>\n  &#x521B;&#x5EFA;&#x5168;&#x5C40;&#x6837;&#x5F0F;\n</h2>\n<p>\n  &#x6BCF;&#x4E2A;&#x7F51;&#x7AD9;&#x90FD;&#x6709;&#x4E00;&#x4E9B;&#x5168;&#x5C40;&#x7684;&#x6837;&#x5F0F;&#x3002; &#x8FD9;&#x5305;&#x62EC;&#x7F51;&#x7AD9;&#x7684;&#x6392;&#x7248;&#x548C;&#x80CC;&#x666F;&#x989C;&#x8272;&#x3002; &#x8FD9;&#x4E9B;&#x6837;&#x5F0F;&#x8BBE;&#x7F6E;&#x4E86;&#x7F51;&#x7AD9;&#x7684;&#x6574;&#x4F53;&#x611F;&#x89C9; - &#x5C31;&#x50CF;&#x5899;&#x58C1;&#x7684;&#x989C;&#x8272;&#x548C;&#x7EB9;&#x7406;&#x8BBE;&#x7F6E;&#x4E86;&#x6574;&#x4E2A;&#x623F;&#x95F4;&#x7684;&#x611F;&#x89C9;&#x3002;\n</p>\n<p>\n  &#x901A;&#x5E38;&#x4EBA;&#x4EEC;&#x4F1A;&#x4F7F;&#x7528;&#x50CF;Bootstrap&#x6216;Foundation&#x8FD9;&#x6837;&#x7684;&#x5168;&#x5C40;&#x98CE;&#x683C;&#x3002; &#x95EE;&#x9898;&#x662F;&#x5B83;&#x4EEC;&#x5F88;&#x96BE;&#x5B9A;&#x5236;&#xFF0C;&#x800C;&#x4E14;&#x5B83;&#x4EEC;&#x4E0D;&#x80FD;&#x4E0E;React&#x7EC4;&#x4EF6;&#x914D;&#x5408;&#x4F7F;&#x7528;&#x3002;\n</p>\n<p>\n  &#x56E0;&#x6B64;&#xFF0C;&#x5728;&#x672C;&#x6559;&#x7A0B;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x6765;&#x63A2;&#x7D22;&#x4E00;&#x4E2A;&#x540D;&#x4E3A;Typography.js&#x7684;JavaScript&#x5E93;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x751F;&#x6210;&#x5168;&#x5C40;&#x6837;&#x5F0F;&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x4E0E;Gatsby&#x548C;React&#x4E00;&#x8D77;&#x4F7F;&#x7528;&#x3002;\n</p>\n<h3>\n  Typography.js\n</h3>\n<p>\n  Typography.js&#x662F;&#x4E00;&#x4E2A;&#x751F;&#x6210;&#x5370;&#x5237;CSS&#x7684;JavaScript&#x5E93;&#x3002;\n</p>\n<p>\n  &#x60A8;&#x4E0D;&#x9700;&#x8981;&#x76F4;&#x63A5;&#x8BBE;&#x7F6E;&#x4E0D;&#x540C;&#x7684;HTML&#x5143;&#x7D20;&#x7684;&#x5B57;&#x4F53;&#x5927;&#x5C0F;&#xFF0C;&#x800C;&#x662F;&#x901A;&#x8FC7;Typography.js&#x6765;&#x83B7;&#x5F97;&#x6240;&#x9700;&#x7684;baseFontSize&#x548C;baseLineHeight&#xFF0C;&#x5E76;&#x6839;&#x636E;&#x8FD9;&#x4E9B;&#x4FE1;&#x606F;&#x751F;&#x6210;&#x6240;&#x6709;&#x5143;&#x7D20;&#x7684;&#x57FA;&#x672C;CSS&#x3002;\n</p>\n<p>\n  &#x8FD9;&#x4F7F;&#x5F97;&#x66F4;&#x6539;&#x7AD9;&#x70B9;&#x4E0A;&#x6240;&#x6709;&#x5143;&#x7D20;&#x7684;&#x5B57;&#x4F53;&#x5927;&#x5C0F;&#x53D8;&#x5F97;&#x5FAE;&#x4E0D;&#x8DB3;&#x9053;&#xFF0C;&#x800C;&#x65E0;&#x9700;&#x76F4;&#x63A5;&#x4FEE;&#x6539;&#x5F88;&#x591A;CSS&#x89C4;&#x5219;&#x3002;\n</p>\n<p>\n  &#x4F7F;&#x7528;&#x5B83;&#x770B;&#x8D77;&#x6765;&#x50CF;&#x8FD9;&#x6837;:\n</p>\n<pre><code class="javascript">import Typography from &quot;typography&quot;\n\nconst typography = new Typography({\n  baseFontSize: &apos;18px&apos;,\n  baseLineHeight: 1.45,\n  headerFontFamily: [&apos;Avenir Next&apos;, &apos;Helvetica Neue&apos;, &apos;Segoe UI&apos;, &apos;Helvetica&apos;, &apos;Arial&apos;, &apos;sans-serif&apos;],\n  bodyFontFamily: [&apos;Georgia&apos;, &apos;serif&apos;],\n})\n</code></pre>\n<h2>\n  Gatsby&#x63D2;&#x4EF6;\n</h2>\n<p>\n  &#x4F46;&#x5728;&#x6211;&#x4EEC;&#x56DE;&#x5230;&#x6784;&#x5EFA;&#x548C;&#x5C1D;&#x8BD5;Typography.js&#x4E4B;&#x524D;&#xFF0C;&#x8BA9;&#x6211;&#x4EEC;&#x5FEB;&#x901F;&#x8F6C;&#x6362;&#x4E00;&#x4E0B;&#xFF0C;&#x8BA8;&#x8BBA;&#x4E00;&#x4E0B;Gatsby&#x63D2;&#x4EF6;&#x3002;\n</p>\n<p>\n  &#x4F60;&#x53EF;&#x80FD;&#x5F88;&#x719F;&#x6089;&#x63D2;&#x4EF6;&#x7684;&#x6982;&#x5FF5;&#x3002; &#x8BB8;&#x591A;&#x8F6F;&#x4EF6;&#x7CFB;&#x7EDF;&#x90FD;&#x652F;&#x6301;&#x6DFB;&#x52A0;&#x81EA;&#x5B9A;&#x4E49;&#x63D2;&#x4EF6;&#x6765;&#x6DFB;&#x52A0;&#x65B0;&#x529F;&#x80FD;&#xFF0C;&#x751A;&#x81F3;&#x4FEE;&#x6539;&#x8F6F;&#x4EF6;&#x7684;&#x6838;&#x5FC3;&#x5DE5;&#x4F5C;&#x3002;\n</p>\n<p>\n  &#x76D6;&#x8328;&#x6BD4;&#x63D2;&#x4EF6;&#x4EE5;&#x540C;&#x6837;&#x7684;&#x65B9;&#x5F0F;&#x5DE5;&#x4F5C;&#x3002;\n</p>\n<p>\n  &#x793E;&#x533A;&#x6210;&#x5458;&#xFF08;&#x6BD4;&#x5982;&#x4F60;&#xFF09;&#x53EF;&#x4EE5;&#x8D21;&#x732E;&#x63D2;&#x4EF6;&#xFF08;&#x5C11;&#x91CF;JavaScript&#x4EE3;&#x7801;&#xFF09;&#xFF0C;&#x5176;&#x4ED6;&#x4EBA;&#x53EF;&#x4EE5;&#x5728;&#x6784;&#x5EFA;Gatsby&#x7F51;&#x7AD9;&#x65F6;&#x4F7F;&#x7528;&#x8FD9;&#x4E9B;&#x63D2;&#x4EF6;&#x3002;\n</p>\n<p>\n  &#x5DF2;&#x7ECF;&#x6709;&#x5F88;&#x591A;&#x7684;&#x63D2;&#x4EF6;&#x4E86;&#xFF01; &#x53EF;&#x4EE5;&#x4ECE; <a href="/docs/plugins/">plugins section of the site</a>&#x68C0;&#x51FA;.\n</p>\n<p>\n  &#x76D6;&#x8328;&#x6BD4;&#x63D2;&#x4EF6;&#x5F88;&#x5BB9;&#x6613;&#x5B89;&#x88C5;&#x548C;&#x4F7F;&#x7528;&#x3002; &#x51E0;&#x4E4E;&#x5728;&#x4F60;&#x5EFA;&#x7ACB;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;Gatsby&#x7F51;&#x7AD9;&#x4E0A;&#xFF0C;&#x4F60;&#x90FD;&#x4F1A;&#x5B89;&#x88C5;&#x63D2;&#x4EF6;&#x3002; &#x5728;&#x5B8C;&#x6210;&#x672C;&#x6559;&#x7A0B;&#x7684;&#x5176;&#x4F59;&#x90E8;&#x5206;&#x65F6;&#xFF0C;&#x60A8;&#x5C06;&#x6709;&#x5F88;&#x591A;&#x673A;&#x4F1A;&#x6765;&#x7EC3;&#x4E60;&#x5B89;&#x88C5;&#x548C;&#x4F7F;&#x7528;&#x63D2;&#x4EF6;&#x3002;\n</p>\n<h2>\n  &#x5B89;&#x88C5;&#x4F60;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;Gatsby&#x63D2;&#x4EF6;\n</h2>\n<p>\n  &#x8BA9;&#x6211;&#x4EEC;&#x5F00;&#x59CB;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x7F51;&#x7AD9;&#x3002; &#x7C7B;&#x4F3C;&#x4E8E;&#x7B2C;&#x4E00;&#x90E8;&#x5206;&#xFF0C;&#x8FD0;&#x884C;&#x4EE5;&#x4E0B;&#x6765;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x7AD9;&#x70B9;&#x3002;\n</p>\n<pre><code>gatsby new tutorial-part-two https://github.com/gatsbyjs/gatsby-starter-hello-world\n</code></pre>\n<p>\n  &#x8FD9;&#x4F1A;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5177;&#x6709;&#x4EE5;&#x4E0B;&#x7ED3;&#x6784;&#x7684;&#x65B0;&#x7AD9;&#x70B9;&#x3002;\n</p>\n<pre><code class="shell">&#x251C;&#x2500;&#x2500; package.json\n&#x251C;&#x2500;&#x2500; src\n&#x2502;&#xA0;&#xA0; &#x2514;&#x2500;&#x2500; pages\n&#x2502;&#xA0;&#xA0;     &#x2514;&#x2500;&#x2500; index.js\n</code></pre>\n<p>\n  &#x8FD9;&#x662F;Gatsby&#x7F51;&#x7AD9;&#x7684;&#x6700;&#x5C0F;&#x8BBE;&#x7F6E;&#x3002;\n</p>\n<p>\n  &#x8981;&#x5B89;&#x88C5;&#x63D2;&#x4EF6;&#xFF0C;&#x6709;&#x4E24;&#x4E2A;&#x6B65;&#x9AA4;&#x3002; &#x9996;&#x5148;&#x5B89;&#x88C5;&#x63D2;&#x4EF6;&#x7684;NPM&#x5305;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x63D2;&#x4EF6;&#x6DFB;&#x52A0;&#x5230;&#x7F51;&#x7AD9;&#x7684;gatsby-config.js&#x4E2D;&#x3002;\n</p>\n<p>\n  Typography.js&#x6709;&#x4E00;&#x4E2A;Gatsby&#x63D2;&#x4EF6;&#xFF0C;&#x6240;&#x4EE5;&#x8BA9;&#x6211;&#x4EEC;&#x901A;&#x8FC7;&#x8FD0;&#x884C;&#x4E0B;&#x9762;&#x547D;&#x4EE4;&#x6765;&#x5B89;&#x88C5;&#xFF1A;\n</p>\n<pre><code class="shell">npm install --save gatsby-plugin-typography\n</code></pre>\n<p>\n  &#x63A5;&#x4E0B;&#x6765;&#xFF0C;&#x5728;&#x540D;&#x4E3A;gatsby-config.js&#x7684;&#x9879;&#x76EE;&#x6587;&#x4EF6;&#x5939;&#x7684;&#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x3002; &#x8FD9;&#x662F;&#x60A8;&#x5C06;&#x63D2;&#x4EF6;&#x6DFB;&#x52A0;&#x5230;&#x7F51;&#x7AD9;&#x4EE5;&#x53CA;&#x5176;&#x4ED6;&#x7F51;&#x7AD9;&#x914D;&#x7F6E;&#x7684;&#x5730;&#x65B9;&#x3002;\n</p>\n<p>\n  &#x5C06;&#x4EE5;&#x4E0B;&#x5185;&#x5BB9;&#x590D;&#x5236;&#x5230;gatsby-config.js&#x4E2D;\n</p>\n<pre><code class="javascript">module.exports = {\n  plugins: [`gatsby-plugin-typography`],\n}\n</code></pre>\n<p>\n  &#x542F;&#x52A8;&#x65F6;&#xFF0C;Gatsby&#x8BFB;&#x53D6;&#x7AD9;&#x70B9;&#x7684;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x3002; &#x5728;&#x8FD9;&#x91CC;&#xFF0C;&#x6211;&#x4EEC;&#x544A;&#x8BC9;&#x5B83;&#x5BFB;&#x627E;&#x4E00;&#x4E2A;&#x540D;&#x4E3A;gatsby-plugin-typography&#x7684;&#x63D2;&#x4EF6;&#x3002; &#x76D6;&#x8328;&#x6BD4;&#x77E5;&#x9053;&#x5BFB;&#x627E;&#x63D2;&#x4EF6;&#x662F;NPM&#x5305;&#xFF0C;&#x6240;&#x4EE5;&#x5B83;&#x4F1A;&#x627E;&#x5230;&#x6211;&#x4EEC;&#x4EE5;&#x524D;&#x5B89;&#x88C5;&#x7684;&#x8F6F;&#x4EF6;&#x5305;&#x3002;\n</p>\n<p>\n  &#x73B0;&#x5728;&#x8FD0;&#x884C; gatsby develop. &#x52A0;&#x8F7D;&#x7AD9;&#x70B9;&#x540E;, &#x5982;&#x679C;&#x60A8;&#x4F7F;&#x7528; Chrome &#x5F00;&#x53D1;&#x4EBA;&#x5458;&#x5DE5;&#x5177;&#x68C0;&#x67E5;&#x751F;&#x6210;&#x7684; HTML, &#x60A8;&#x4F1A;&#x770B;&#x5230;&#x6392;&#x7248;&#x63D2;&#x4EF6;&#x5C06;&#x5176;&#x751F;&#x6210;&#x7684; CSS&#x7684;\n  \n  <style>\n    元素添加到\n    \n    <head>\n      元素中。</p></style></p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>  <p>\n    <img src="typography-styles.png" alt="typography-styles" />\n  </p>\n\n\n  \n  <p>\n    将以下内容复制到src/pages/index.js中，以便更好地看到Typography.js生成的排版CSS的效果\n  </p>\n\n\n  \n  <pre><code class="jsx">import React from "react"</code></pre>\n      </div>\n<p>export default () =>\n&#x3C;div>\n&#x3C;h1>Richard Hamming on Luck&#x3C;/h1>\n&#x3C;div>\n&#x3C;p>\nFrom Richard Hamming’s classic and must-read talk, “&#x3C;a href=”<a href="http://www.cs.virginia.edu/~robins/YouAndYourResearch.html%22%3E">http://www.cs.virginia.edu/~robins/YouAndYourResearch.html”></a>;\nYou and Your Research\n&#x3C;/a>”.\n&#x3C;/p>\n&#x3C;blockquote>\n&#x3C;p>\nThere is indeed an element of luck, and no, there isn’t. The prepared\nmind sooner or later finds something important and does it. So yes, it\nis luck.{” “}\n&#x3C;em>\nThe particular thing you do is luck, but that you do something is\nnot.\n&#x3C;/em>\n&#x3C;/p>\n&#x3C;/blockquote>\n&#x3C;/div>\n&#x3C;p>Posted April 09, 2011&#x3C;/p>\n&#x3C;/div>\n</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>  <p>\n    你的网站现在应该是这样的\n  </p>\n\n\n  \n  <p>\n    <img src="typography-not-centered.png" alt="typography-not-centered" />\n  </p>\n\n\n  \n  <p>\n    让我们快速改进一下。 许多网站在页面中间有一列文本。 要创建它，请将以下样式添加到src/pages/index.js中的\n    \n    <div>\n      </p>\n\n\n      \n      <pre><code class="jsx{4}">import React from "react"</code></pre>\n      </div>\n<p>export default () =>\n&#x3C;div style={{ margin: ‘3rem auto’, maxWidth: 600 }}>\n&#x3C;h1>Richard Hamming on Luck&#x3C;/h1>\n&#x3C;div>\n&#x3C;p>\nFrom Richard Hamming’s classic and must-read talk, “&#x3C;a href=”<a href="http://www.cs.virginia.edu/~robins/YouAndYourResearch.html%22%3E">http://www.cs.virginia.edu/~robins/YouAndYourResearch.html”></a>;\nYou and Your Research\n&#x3C;/a>”.\n&#x3C;/p>\n&#x3C;blockquote>\n&#x3C;p>\nThere is indeed an element of luck, and no, there isn’t. The prepared\nmind sooner or later finds something important and does it. So yes, it\nis luck.{” “}\n&#x3C;em>\nThe particular thing you do is luck, but that you do something is\nnot.\n&#x3C;/em>\n&#x3C;/p>\n&#x3C;/blockquote>\n&#x3C;/div>\n&#x3C;p>Posted April 09, 2011&#x3C;/p>\n&#x3C;/div>\n</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>      <p>\n        <img src="typography-centered.png" alt="basic-typography-centered" />\n      </p>\n\n\n      \n      <p>\n        啊，这个开始变好看了！\n      </p>\n\n\n      \n      <p>\n        我们在这里看到的是Typography.js生成的默认的CSS 。 但是，我们可以轻松地定制它。 我们来做吧\n      </p>\n\n\n      \n      <p>\n        在您的站点中，在 src/utils/ code>处创建一个新目录。 在那里创建一个名为 typography.js 的文件。 在其中添加下面的代码。\n      </p>\n\n\n      \n      <pre><code class="javascript">import Typography from "typography"</code></pre>\n      </div>\n<p>const typography = new Typography({ baseFontSize: ‘18px’ })</p>\n<p>export default typography\n</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>      <p>\n        &#x7136;&#x540E;&#x5C06;&#x8FD9;&#x4E2A;&#x6A21;&#x5757;&#x8BBE;&#x7F6E;&#x4E3A;gatsby-plugin-typography&#x4F5C;&#x4E3A;&#x5B83;&#x7684;&#x914D;&#x7F6E;&#x5728;&#x6211;&#x4EEC;&#x7684;gatsby-config.js&#x6587;&#x4EF6;&#x4E2D;&#x4F7F;&#x7528;&#x3002;\n      </p>\n\n\n      \n      <pre><code class="javascript{2..9}">module.exports = {</code></pre>\n      </code></pre></div>\n<p>  plugins: [\n{\nresolve: <code>gatsby-plugin-typography</code>,\noptions: {\npathToConfigModule: <code>src/utils/typography.js</code>,\n},\n},\n],\n}\n</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>      <p>\n        &#x505C;&#x6B62; gatsby develop &#xFF0C;&#x7136;&#x540E;&#x91CD;&#x65B0;&#x542F;&#x52A8;&#x5B83;&#xFF0C;&#x8BA9;&#x6211;&#x4EEC;&#x7684;&#x63D2;&#x4EF6;&#x66F4;&#x6539;&#x751F;&#x6548;&#x3002;\n      </p>\n\n\n      \n      <p>\n        &#x73B0;&#x5728;&#x6240;&#x6709;&#x7684;&#x6587;&#x5B57;&#x5B57;&#x4F53;&#x5927;&#x5C0F;&#x90FD;&#x5E94;&#x8BE5;&#x7A0D;&#x5927;&#x4E9B;&#x3002; &#x5C1D;&#x8BD5;&#x5C06; baseFontSize &#x66F4;&#x6539;&#x4E3A; 24px&#xFF0C; &#x6240;&#x6709;&#x7684;&#x5143;&#x7D20;&#x90FD;&#x88AB;&#x8C03;&#x6574;&#x5927;&#x5C0F;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x4EEC;&#x7684; font-size&#x662F;&#x57FA;&#x4E8E;baseFontSize&#x7684;&#x3002;\n      </p>\n\n\n      \n      <p>\n        &#x4E3A;Typography.js&#x63D0;&#x4F9B;&#x4E86;<a href="https://github.com/KyleAMathews/typography.js#published-typographyjs-themes">&#x8BB8;&#x591A;&#x4E3B;&#x9898;</a>. &#x6211;&#x4EEC;&#x6765;&#x8BD5;&#x8BD5;&#x4E00;&#x4E0B;&#x5427;, &#x5728;&#x60A8;&#x7684;&#x7AD9;&#x70B9;&#x7684;&#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x8FD0;&#x884C;&#x7EC8;&#x7AEF;&#x547D;&#x4EE4;&#xFF1A;\n      </p>\n\n\n      \n      <pre><code class="shell">npm install --save typography-theme-bootstrap typography-theme-lawton</code></pre>\n      </code></pre></div>\n<p></p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>      <p>\n        &#x8981;&#x4F7F;&#x7528;Bootstrap&#x4E3B;&#x9898;&#xFF0C;&#x8BF7;&#x5C06;&#x60A8;&#x7684;&#x5370;&#x5237;&#x4EE3;&#x7801;&#x66F4;&#x6539;&#x4E3A;&#xFF1A;\n      </p>\n\n\n      \n      <pre><code class="javascript{2,4}">import Typography from &quot;typography&quot;</code></pre>\n      </code></pre></div>\n<p>import bootstrapTheme from “typography-theme-bootstrap”</p>\n<p>const typography = new Typography(bootstrapTheme)</p>\n<p>export default typography\n</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>      <p>\n        <img src="typography-bootstrap.png" alt="typography-bootstrap" />\n      </p>\n\n\n      \n      <p>\n        主题还可以添加Google字体。 我们与Bootstrap主题一起安装的Lawton主题是这样做的。 用以下替换您的印刷术模块代码，然后重新启动开发服务器（加载新的Google字体所必需的）。\n      </p>\n\n\n      \n      <pre><code class="javascript{2-3,5}">import Typography from "typography"</code></pre>\n      </div>\n<p>// import bootstrapTheme from “typography-theme-bootstrap”\nimport lawtonTheme from “typography-theme-lawton”</p>\n<p>const typography = new Typography(lawtonTheme)</p>\n<p>export default typography\n</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>      <p>\n        <img src="typography-lawton.png" alt="typography-lawton" />\n      </p>\n\n\n      \n      <p>\n        Typography.js有超过30个主题！ <a href="http://kyleamathews. github. io/typography. js">试一下</a>或者查看代码的 <a href="https://github. com/KyleAMathews/typography. js#published-typographyjs-themes">完整列表</a>\n      </p>\n\n\n      \n      <h2>\n        CSS组件\n      </h2>\n\n\n      \n      <p>\n        盖茨比有丰富的选项可用于样式组件。 让我们来探索三个非常受欢迎的产品选项。 我们将建立一个简单的页面三次，以探索每个样式选项。\n      </p>\n\n\n      \n      <p>\n        每个都是“CSS-in-JS”中的一个变种，它解决了传统CSS的许多问题。\n      </p>\n\n\n      \n      <p>\n        他们解决的最重要的问题之一是选择器名称冲突。 使用传统的CSS，您必须小心，不要覆盖站点中其他地方使用的CSS选择器，因为所有CSS选择器都位于同一个全局名称空间中。 这个限制会让你必须小心（并且经常令人困惑）选择器命名方案。\n      </p>\n\n\n      \n      <p>\n        使用CSS-in-JS，可以避免所有这些，因为CSS选择器会自动限定到其组件。 样式与其组件紧密结合。 这使得知道如何编辑组件的CSS变得非常容易，因为从来没有任何关于如何和在哪里使用CSS的混淆。\n      </p>\n\n\n      \n      <p>\n        有关CSS-in-JS的一些背景知识，请参见<a href="https://speakerdeck. com/vjeux/react-css-in-js"> Christopher“vjeux”Chedeau 2014年的演讲，激发了这一运动</ a >以及<a href="https://medium. com/seek-blog/a-unified-styling-language-d0c208de2660"> Mark Dalgleish最近发布的“统一样式语言”</a>。</p>\n\n\n        \n        <h3>\n          CSS模块\n        </h3>\n\n\n        \n        <p>\n          我们来开发第一个CSS模块\n        </p>\n\n\n        \n        <p>\n          从CSS模块主页引用：\n        </p>\n\n\n        \n        <blockquote>\n          <p>\n            CSS模块是一个CSS文件，其中所有类名称和动画名称默认在本地范围内。\n          </p>\n\n        </blockquote>\n\n\n        \n        <p>\n          CSS模块非常受欢迎，因为它可以让你像平常一样编写CSS，但安全性更高。 该工具自动使类和动画的名称独特，所以你不必担心选择器名称冲突。\n        </p>\n\n\n        \n        <p>\n          CSS模块被强烈推荐给那些用Gatsby构建的新模块（通常是React）。\n        </p>\n\n\n        \n        <p>\n          Gatsby开箱即用CSS模块。\n        </p>\n\n\n        \n        <p>\n          让我们使用CSS模块构建一个页面。\n        </p>\n\n\n        \n        <p>\n          首先，我们创建一个新的Container组件，我们将使用它来为每个CSS-in-JS示例使用。 在src/components创建一个组件目录，然后在这个目录下创建一个名为container.js的文件并粘贴下面的代码。\n        </p>\n\n\n        \n        <pre><code class="javascript">import React from "react"</code></pre>\n      </div>\n<p>export default ({ children }) =>\n&#x3C;div style={{ margin: “3rem auto”, maxWidth: 600 }}>\n{children}\n&#x3C;/div>\n</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>        <p>\n          &#x7136;&#x540E;&#x901A;&#x8FC7;&#x5728;src/pages/about-css-modules.js&#x4E2D;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x6765;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x7EC4;&#x4EF6;&#x9875;&#x9762;&#xFF1A;\n        </p>\n\n\n        \n        <pre><code class="javascript">import React from &quot;react&quot;</code></pre>\n      </code></pre></div>\n<p>import Container from “../components/container”</p>\n<p>export default () =>\n&#x3C;Container>\n&#x3C;h1>About CSS Modules&#x3C;/h1>\n&#x3C;p>CSS Modules are cool&#x3C;/p>\n&#x3C;/Container>\n</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>        <p>\n          您会注意到我们导入了刚刚创建的Container组件。\n        </p>\n\n\n        \n        <p>\n          您的页面现在应该如下所示：\n        </p>\n\n\n        \n        <p>\n          <img src="css-modules-1.png" alt="css-modules-1" />\n        </p>\n\n\n        \n        <p>\n          我们来创建一个简单的名单，头像和简短的拉丁传记名单。\n        </p>\n\n\n        \n        <p>\n          首先，我们在src/pages/about-css-modules.module.css中创建CSS的文件。 您会注意到，文件名以.module.css结尾，而不是像普通的.css结尾。 这就是我们如何告诉Gatsby这个CSS文件应该作为CSS模块来处理。\n        </p>\n\n\n        \n        <pre><code class="css">.user {</code></pre>\n      </div>\n<p>  display: flex;\nalign-items: center;\nmargin: 0 auto 12px auto;\n}</p>\n<p>.user:last-child {\nmargin-bottom: 0;\n}</p>\n<p>.avatar {\nflex: 0 0 96px;\nwidth: 96px;\nheight: 96px;\nmargin: 0;\n}</p>\n<p>.description {\nflex: 1;\nmargin-left: 18px;\npadding: 12px;\n}</p>\n<p>.username {\nmargin: 0 0 12px 0;\npadding: 0;\n}</p>\n<p>.excerpt {\nmargin: 0;\n}\n</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>        <p>\n          &#x73B0;&#x5728;&#x5C06;&#x8BE5;&#x6587;&#x4EF6;&#x5BFC;&#x5165;&#x6211;&#x4EEC;&#x524D;&#x9762;&#x521B;&#x5EFA;&#x7684;about-css-modules.js&#x9875;&#x9762;&#x3002; &#x540C;&#x65F6;&#x8BB0;&#x5F55;&#x7ED3;&#x679C;&#x5BFC;&#x5165;&#xFF0C;&#x4EE5;&#x4FBF;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x5904;&#x7406;&#x6587;&#x4EF6;&#x7684;&#x6837;&#x5B50;&#x3002;\n        </p>\n\n\n        \n        <pre><code class="javascript">import styles from &quot;./about-css-modules.module.css&quot;</code></pre>\n      </code></pre></div>\n<p>console.log(styles)\n</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>        <p>\n          如果您在浏览器中打开开发者控制台，您将看到：\n        </p>\n\n\n        \n        <p>\n          <img src="css-modules-console.png" alt="css-modules-console" />\n        </p>\n\n\n        \n        <p>\n          如果您将它与我们的CSS文件进行比较，您会看到每个类现在都是导入对象中的一个键，指向一个长字符串，例如 头像指向about-css-modules-module --- avatar ---- hYcv。 这些是CSS模块生成的类名称。 他们保证在您的网站是唯一的。 而且因为你必须导入它们才能使用这些类，所以从来没有任何关于使用某些CSS的问题。\n        </p>\n\n\n        \n        <p>\n          让我们使用我们的样式来创建一个简单的用户组件。\n        </p>\n\n\n        \n        <p>\n          让我们在about-css-modules.js页面组件中内联创建新组件。 一般的经验法则是如果你在一个站点的多个地方使用一个组件，它应该在它自己的组件目录中的模块文件中。 但是，如果仅在一个文件中使用，请将其内联创建。\n        </p>\n\n\n        \n        <p>\n          修改about-css-modules.js，使其如下所示：\n        </p>\n\n\n        \n        <pre><code class="jsx{6-17,23-30}">import React from "react"</code></pre>\n      </div>\n<p>import styles from “./about-css-modules.module.css”</p>\n<p>import Container from “../components/container”</p>\n<p>const User = props =>\n&#x3C;div className={styles.user}>\n&#x3C;img src={props.avatar} className={styles.avatar} alt="" />\n&#x3C;div className={styles.description}>\n&#x3C;h2 className={styles.username}>\n{props.username}\n&#x3C;/h2>\n&#x3C;p className={styles.excerpt}>\n{props.excerpt}\n&#x3C;/p>\n&#x3C;/div>\n&#x3C;/div></p>\n<p>export default () =>\n&#x3C;Container>\n&#x3C;h1>About CSS Modules&#x3C;/h1>\n&#x3C;p>CSS Modules are cool&#x3C;/p>\n&#x3C;User\nusername=“Jane Doe”\navatar=”<a href="https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg">https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg</a>”\nexcerpt=“I’m Jane Doe. Lorem ipsum dolor sit amet, consectetur adipisicing elit.”\n/>\n&#x3C;User\nusername=“Bob Smith”\navatar=”<a href="https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg">https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg</a>”\nexcerpt=“I’m Bob smith, a vertically aligned type of guy. Lorem ipsum dolor sit amet, consectetur adipisicing elit.”\n/>\n&#x3C;/Container>\n</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>        <p>\n          现在完成的页面应该如下所示：\n        </p>\n\n\n        \n        <p>\n          <img src="css-modules-final.png" alt="css-modules-final" />\n        </p>\n\n\n        \n        <h3>\n          Glamor\n        </h3>\n\n\n        \n        <p>\n          让我们用<a href="https://github.com/threepointone/glamor">Glamour</a>来创建相同的页面。\n        </p>\n\n\n        \n        <p>\n          Glamour可以让你在你的组件中使用相同的React支持的Object CSS语法\n        </p>\n\n\n        \n        <p>\n          首先安装Glamor的Gatsby插件。\n        </p>\n\n\n        \n        <pre><code class="shell">npm install --save gatsby-plugin-glamor</code></pre>\n      </div>\n<p></p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>        <p>\n          &#x7136;&#x540E;&#x628A;&#x5B83;&#x6DFB;&#x52A0;&#x5230;&#x4F60;&#x7684;gatsby-config.js\n        </p>\n\n\n        \n        <pre><code class="javascript{9}">module.exports = {</code></pre>\n      </code></pre></div>\n<p>  plugins: [\n{\nresolve: <code>gatsby-plugin-typography</code>,\noptions: {\npathToConfigModule: <code>src/utils/typography.js</code>,\n},\n},\n<code>gatsby-plugin-glamor</code>,\n],\n}\n</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>        <p>\n          &#x91CD;&#x65B0;&#x542F;&#x52A8;gatsby develop&#x547D;&#x4EE4;&#x542F;&#x7528;Glamor&#x63D2;&#x4EF6;&#x3002;\n        </p>\n\n\n        \n        <p>\n          &#x73B0;&#x5728;&#x5728;src/pages/about-glamour.js&#x4E2D;&#x521B;&#x5EFA;Glamor&#x9875;&#x9762;\n        </p>\n\n\n        \n        <pre><code class="jsx">import React from &quot;react&quot;</code></pre>\n      </code></pre></div>\n<p>import Container from “../components/container”</p>\n<p>export default () =>\n&#x3C;Container>\n&#x3C;h1>About Glamor&#x3C;/h1>\n&#x3C;p>Glamor is cool&#x3C;/p>\n&#x3C;/Container>\n</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>        <p>\n          &#x8BA9;&#x6211;&#x4EEC;&#x6DFB;&#x52A0;&#x76F8;&#x540C;&#x7684;&#x5185;&#x8054;&#x7528;&#x6237;&#x7EC4;&#x4EF6;&#xFF0C;&#x4F46;&#x8FD9;&#x6B21;&#x4F7F;&#x7528;Glamor&#x7684;CSS&#x7684; prop&#x5C5E;&#x6027;&#x3002;\n        </p>\n\n\n        \n        <pre><code class="jsx{5-26,32-40}">import React from &quot;react&quot;</code></pre>\n      </code></pre></div>\n<p>import Container from “../components/container”</p>\n<p>const User = props =>\n&#x3C;div\ncss={{\ndisplay: <code>flex</code>,\nalignItems: <code>center</code>,\nmargin: <code>0 auto 12px auto</code>,\n”&#x26;:last-child”: { marginBottom: 0 }\n}}\n>\n&#x3C;img\nsrc={props.avatar}\ncss={{ flex: <code>0 0 96px</code>, width: 96, height: 96, margin: 0 }}\nalt=""\n/>\n&#x3C;div css={{ flex: 1, marginLeft: 18, padding: 12 }}>\n&#x3C;h2 css={{ margin: <code>0 0 12px 0</code>, padding: 0 }}>\n{props.username}\n&#x3C;/h2>\n&#x3C;p css={{ margin: 0 }}>\n{props.excerpt}\n&#x3C;/p>\n&#x3C;/div>\n&#x3C;/div></p>\n<p>export default () =>\n&#x3C;Container>\n&#x3C;h1>About Glamor&#x3C;/h1>\n&#x3C;p>Glamor is cool&#x3C;/p>\n&#x3C;User\nusername=“Jane Doe”\navatar=”<a href="https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg">https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg</a>”\nexcerpt=“I’m Jane Doe. Lorem ipsum dolor sit amet, consectetur adipisicing elit.”\n/>\n&#x3C;User\nusername=“Bob Smith”\navatar=”<a href="https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg">https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg</a>”\nexcerpt=“I’m Bob smith, a vertically aligned type of guy. Lorem ipsum dolor sit amet, consectetur adipisicing elit.”\n/>\n&#x3C;/Container>\n</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>        <p>\n          最后的Glamor页面应该看起来与CSS模块页面相同。\n        </p>\n\n\n        \n        <p>\n          <img src="glamor-example.png" alt="glamor-example" />\n        </p>\n\n\n        \n        <h3>\n          样式组件\n        </h3>\n\n\n        \n        <p>\n          对于我们最后的CSS-in-JS示例，我们将尝试使用样式组件。\n        </p>\n\n\n        \n        <p>\n          样式组件允许您在组件中使用实际的CSS语法。\n        </p>\n\n\n        \n        <p>\n          首先，像平常一样，我们将为样式组件安装Gatsby插件。\n        </p>\n\n\n        \n        <pre><code class="sh">npm install --save gatsby-plugin-styled-components</code></pre>\n      </div>\n<p></p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>        <p>\n          &#x7136;&#x540E;&#x4FEE;&#x6539;gatsby-config.js&#x3002; &#x5728;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x6837;&#x5F0F;&#x7EC4;&#x4EF6;&#x4E4B;&#x524D;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5220;&#x9664;Glamor&#x63D2;&#x4EF6;&#x5E76;&#x5220;&#x9664;&#x6211;&#x4EEC;&#x521B;&#x5EFA;&#x7684;Glamor&#x7EC4;&#x4EF6;&#x9875;&#x9762;&#x3002; &#x8FD9;&#x4E24;&#x4E2A;&#x63D2;&#x4EF6;&#x76F8;&#x4E92;&#x51B2;&#x7A81;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x4EEC;&#x90FD;&#x60F3;&#x5728;&#x670D;&#x52A1;&#x5668;&#x6E32;&#x67D3;&#x8FC7;&#x7A0B;&#x4E2D;&#x8FDB;&#x884C;&#x63A7;&#x5236;&#x3002;\n        </p>\n\n\n        \n        <pre><code class="javascript{9}">module.exports = {</code></pre>\n      </code></pre></div>\n<p>  plugins: [\n{\nresolve: <code>gatsby-plugin-typography</code>,\noptions: {\npathToConfigModule: <code>src/utils/typography.js</code>,\n},\n},\n<code>gatsby-plugin-styled-components</code>,\n],\n}\n</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>        <p>\n          &#x7136;&#x540E;&#x5728;src/pages/about-styled-components.js&#x521B;&#x5EFA;&#xFF1A;\n        </p>\n\n\n        \n        <pre><code class="jsx">import React from &quot;react&quot;</code></pre>\n      </code></pre></div>\n<p>import styled from “styled-components”</p>\n<p>import Container from “../components/container”</p>\n<p>const UserWrapper = styled.div<code>display: flex; align-items: center; margin: 0 auto 12px auto; &#x26;:last-child { margin-bottom: 0; }</code></p>\n<p>const Avatar = styled.img<code>flex: 0 0 96px; width: 96px; height: 96px; margin: 0;</code></p>\n<p>const Description = styled.div<code>flex: 1; margin-left: 18px; padding: 12px;</code></p>\n<p>const Username = styled.h2<code>margin: 0 0 12px 0; padding: 0;</code></p>\n<p>const Excerpt = styled.p<code>margin: 0;</code></p>\n<p>const User = props =>\n&#x3C;UserWrapper>\n&#x3C;Avatar src={props.avatar} alt="" />\n&#x3C;Description>\n&#x3C;Username>\n{props.username}\n&#x3C;/Username>\n&#x3C;Excerpt>\n{props.excerpt}\n&#x3C;/Excerpt>\n&#x3C;/Description>\n&#x3C;/UserWrapper></p>\n<p>export default () =>\n&#x3C;Container>\n&#x3C;h1>About Styled Components&#x3C;/h1>\n&#x3C;p>Styled Components is cool&#x3C;/p>\n&#x3C;User\nusername=“Jane Doe”\navatar=”<a href="https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg">https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg</a>”\nexcerpt=“I’m Jane Doe. Lorem ipsum dolor sit amet, consectetur adipisicing elit.”\n/>\n&#x3C;User\nusername=“Bob Smith”\navatar=”<a href="https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg">https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg</a>”\nexcerpt=“I’m Bob smith, a vertically aligned type of guy. Lorem ipsum dolor sit amet, consectetur adipisicing elit.”\n/>\n&#x3C;/Container></p>\n<p></p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>        <h3>\n          &#x5176;&#x4ED6;CSS&#x9009;&#x9879;\n        </h3>\n\n\n        \n        <p>\n          Gatsby&#x652F;&#x6301;&#x51E0;&#x4E4E;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x7684;&#x6837;&#x5F0F;&#x9009;&#x9879;&#xFF08;&#x5982;&#x679C;&#x60A8;&#x7684;CSS&#x9009;&#x9879;&#x6CA1;&#x6709;&#x63D2;&#x4EF6;&#xFF0C;&#x8BF7;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#xFF01;&#xFF09;\n        </p>\n\n\n        \n        <ul>\n          <li>\n            <a href="/packages/gatsby-plugin-sass/">Sass</a>\n          </li>\n\n          \n          <li>\n            <a href="/packages/gatsby-plugin-emotion/">Emotion</a>\n          </li>\n\n          \n          <li>\n            <a href="/packages/gatsby-plugin-jss/">JSS</a>\n          </li>\n\n          \n          <li>\n            <a href="/packages/gatsby-plugin-stylus/">Stylus</a>\n          </li>\n\n          \n          <li>\n            and more!\n          </li>\n\n        </ul>\n\n\n        \n        <p>\n          &#x73B0;&#x5728;&#x7EE7;&#x7EED;&#x6559;&#x7A0B;&#x7684;&#x7B2C;&#x4E09;&#x90E8;&#x5206;&#x3002;\n        </p></code></pre>\n      </div>',excerpt:"欢迎来到Gatsby教程的第二部分！ 在这一部分，我们将探索Gatsby网站的样式选择，并深入探讨如何使用React组件来构建网站。 用组件构建 在开始构建组件时，您所做的一个重大转变就是现在您的CSS，HTML和JavaScript…",timeToRead:9,frontmatter:{title:"Gatsby.js Tutorial Part Two"},parent:{__typename:"File",relativePath:"tutorial/part-two/index.md"}}},pathContext:{slug:"/tutorial/part-two/"}}}});
//# sourceMappingURL=path---tutorial-part-two-bed568923e8786aecff0.js.map